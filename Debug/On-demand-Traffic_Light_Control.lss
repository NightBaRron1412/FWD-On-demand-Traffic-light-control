
On-demand-Traffic_Light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000186e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000186e  00001902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  0080006e  0080006e  00001910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f4c  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb1  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0c  00000000  00000000  00004809  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  00006318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9d  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022c4  00000000  00000000  000078c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00009b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_1>
       8:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_2>
       c:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_3>
      10:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_4>
      14:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_5>
      18:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_6>
      1c:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_7>
      20:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_8>
      24:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_9>
      28:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_10>
      2c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
      8a:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time_is_up>:
 * Output: void
 */
void time_is_up(void)
{
    /* set the timeisUp flag to indicate that time have passed */
    timeisUp = True;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <timeisUp>
      98:	08 95       	ret

0000009a <pedestrian_buttonISR>:

/* ========================== Pedestrian Button ISR Function ========================== */

void pedestrian_buttonISR(void)
{
    DIO_u8GetPinValue(PORT_A, PIN_0, &carGreenLEDState);
      9a:	4b eb       	ldi	r20, 0xBB	; 187
      9c:	50 e0       	ldi	r21, 0x00	; 0
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <DIO_u8GetPinValue>
    DIO_u8GetPinValue(PORT_A, PIN_2, &carRedLEDState);
      a6:	4c eb       	ldi	r20, 0xBC	; 188
      a8:	50 e0       	ldi	r21, 0x00	; 0
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 d7 03 	call	0x7ae	; 0x7ae <DIO_u8GetPinValue>

    if (carRedLEDState == HIGH && pressedRedisOn == False && pressedGreen_YellowisOn == False)
      b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <carRedLEDState>
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	91 f4       	brne	.+36     	; 0xde <pedestrian_buttonISR+0x44>
      ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedRedisOn>
      be:	81 11       	cpse	r24, r1
      c0:	0e c0       	rjmp	.+28     	; 0xde <pedestrian_buttonISR+0x44>
      c2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
      c6:	81 11       	cpse	r24, r1
      c8:	0a c0       	rjmp	.+20     	; 0xde <pedestrian_buttonISR+0x44>
    {
        LED_u8Off(PED_RED);
      ca:	85 e0       	ldi	r24, 0x05	; 5
      cc:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        LED_u8On(PED_GREEN);
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        pressedRedisOn = True;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <pressedRedisOn>
      dc:	08 95       	ret
    }

    else if ((carGreenLEDState == HIGH || carYellowLEDState == HIGH) && pressedRedisOn == False && pressedGreen_YellowisOn == False)
      de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <carGreenLEDState>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	21 f0       	breq	.+8      	; 0xee <pedestrian_buttonISR+0x54>
      e6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <carYellowLEDState>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	71 f4       	brne	.+28     	; 0x10a <pedestrian_buttonISR+0x70>
      ee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedRedisOn>
      f2:	81 11       	cpse	r24, r1
      f4:	0a c0       	rjmp	.+20     	; 0x10a <pedestrian_buttonISR+0x70>
      f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
      fa:	81 11       	cpse	r24, r1
      fc:	06 c0       	rjmp	.+12     	; 0x10a <pedestrian_buttonISR+0x70>
    {
        LED_u8On(PED_RED);
      fe:	85 e0       	ldi	r24, 0x05	; 5
     100:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        pressedGreen_YellowisOn = True;
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
     10a:	08 95       	ret

0000010c <delay_5sec>:
 * Output: void
 */
void delay_5sec(void)
{
    /* reset timeisUp flag */
    timeisUp = False;
     10c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <timeisUp>

    /* set the timer to count for 5 seconds */
    TMR_u8SetDesiredTime(TIMER_0, 5 * SEC);
     110:	40 e4       	ldi	r20, 0x40	; 64
     112:	5b e4       	ldi	r21, 0x4B	; 75
     114:	6c e4       	ldi	r22, 0x4C	; 76
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 41 07 	call	0xe82	; 0xe82 <TMR_u8SetDesiredTime>

    /* wait until 5 seconds have passed */
    while (timeisUp != True)
     11e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <timeisUp>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	e1 f7       	brne	.-8      	; 0x11e <delay_5sec+0x12>
        ;
}
     126:	08 95       	ret

00000128 <delay_500msec>:
 * Output: void
 */
void delay_500msec(void)
{
    /* reset timeisUp flag */
    timeisUp = False;
     128:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <timeisUp>

    /* set the timer to count for 500 milliseconds */
    TMR_u8SetDesiredTime(TIMER_0, 500 * mSEC);
     12c:	40 e2       	ldi	r20, 0x20	; 32
     12e:	51 ea       	ldi	r21, 0xA1	; 161
     130:	67 e0       	ldi	r22, 0x07	; 7
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 41 07 	call	0xe82	; 0xe82 <TMR_u8SetDesiredTime>

    /* wait until 500 milliseconds have passed */
    while (timeisUp != True)
     13a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <timeisUp>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	e1 f7       	brne	.-8      	; 0x13a <delay_500msec+0x12>
        ;
}
     142:	08 95       	ret

00000144 <yellow_blink>:
 * Description: a function to preform yellow light blinking
 * Inputs: mode to indicate which yellow light to blink
 * Output: void
 */
void yellow_blink(u8 mode)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	d8 2f       	mov	r29, r24
    /* a flag to indicate that the yellow light is blinking */
    carYellowLEDState = HIGH;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <carYellowLEDState>

    /* Blinking the yellow LEDs every second for 5 secs */
    for (u8 i = 1; i <= 5; i++)
     150:	c1 e0       	ldi	r28, 0x01	; 1
     152:	15 c0       	rjmp	.+42     	; 0x17e <yellow_blink+0x3a>
    {
        LED_u8On(CAR_YELLOW);
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>

        /* check if the pedestrian yellow light is required to be blinking */
        if (mode == BOTH_YELLOW)
     15a:	d5 36       	cpi	r29, 0x65	; 101
     15c:	19 f4       	brne	.+6      	; 0x164 <yellow_blink+0x20>
        {
            LED_u8On(PED_YELLOW);
     15e:	84 e0       	ldi	r24, 0x04	; 4
     160:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        }

        delay_500msec();
     164:	0e 94 94 00 	call	0x128	; 0x128 <delay_500msec>

        LED_u8Off(CAR_YELLOW);
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>

        /* check if the pedestrian yellow light is required to be blinking */
        if (mode == BOTH_YELLOW)
     16e:	d5 36       	cpi	r29, 0x65	; 101
     170:	19 f4       	brne	.+6      	; 0x178 <yellow_blink+0x34>
        {
            LED_u8Off(PED_YELLOW);
     172:	84 e0       	ldi	r24, 0x04	; 4
     174:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        }

        delay_500msec();
     178:	0e 94 94 00 	call	0x128	; 0x128 <delay_500msec>
{
    /* a flag to indicate that the yellow light is blinking */
    carYellowLEDState = HIGH;

    /* Blinking the yellow LEDs every second for 5 secs */
    for (u8 i = 1; i <= 5; i++)
     17c:	cf 5f       	subi	r28, 0xFF	; 255
     17e:	c6 30       	cpi	r28, 0x06	; 6
     180:	48 f3       	brcs	.-46     	; 0x154 <yellow_blink+0x10>

        delay_500msec();
    }

    /* reset the yellow light state */
    carYellowLEDState = LOW;
     182:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <carYellowLEDState>
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <pedestrian_mode_green_yellow>:
 * Output: void
 */
void pedestrian_mode_green_yellow(void)
{
    /* Check if the pedestrian button is pressed */
    if (pressedGreen_YellowisOn)
     18c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     190:	88 23       	and	r24, r24
     192:	e9 f0       	breq	.+58     	; 0x1ce <pedestrian_mode_green_yellow+0x42>
    {

        /* Turn off pedestrian red light */
        LED_u8Off(PED_RED);
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>

        /* Blinking both yellow LEDs for 5 secs */
        yellow_blink(BOTH_YELLOW);
     19a:	85 e6       	ldi	r24, 0x65	; 101
     19c:	0e 94 a2 00 	call	0x144	; 0x144 <yellow_blink>

        /* Turn on the pedestrian green light and the car red light for 5 sec */
        LED_u8Off(PED_RED);
     1a0:	85 e0       	ldi	r24, 0x05	; 5
     1a2:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        LED_u8On(PED_GREEN);
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        LED_u8On(CAR_RED);
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        delay_5sec();
     1b2:	0e 94 86 00 	call	0x10c	; 0x10c <delay_5sec>
        LED_u8Off(CAR_RED);
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>

        /* Blinking both yellow LEDs for 5 secs while pedestrian green light is still on */
        yellow_blink(BOTH_YELLOW);
     1bc:	85 e6       	ldi	r24, 0x65	; 101
     1be:	0e 94 a2 00 	call	0x144	; 0x144 <yellow_blink>

        /* Turn off the pedestrian green light and turn on the pedestrian red light */
        LED_u8Off(PED_GREEN);
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        LED_u8On(PED_RED);
     1c8:	85 e0       	ldi	r24, 0x05	; 5
     1ca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
     1ce:	08 95       	ret

000001d0 <pedestrian_mode_red>:
 * Output: void
 */
void pedestrian_mode_red(void)
{
    /* Check if the pedestrian button is pressed */
    switch (pressedRedisOn)
     1d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedRedisOn>
     1d4:	88 23       	and	r24, r24
     1d6:	89 f0       	breq	.+34     	; 0x1fa <pedestrian_mode_red+0x2a>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	b9 f4       	brne	.+46     	; 0x20a <pedestrian_mode_red+0x3a>
    {
    case True:
        /* wait for 5 seconds while car red light and pedestrian green light is on */
        delay_5sec();
     1dc:	0e 94 86 00 	call	0x10c	; 0x10c <delay_5sec>

        /* Turn off the car red light and blink both yellow LEDs for 5 sec while pedestrian green light is still on */
        LED_u8Off(CAR_RED);
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        yellow_blink(BOTH_YELLOW);
     1e6:	85 e6       	ldi	r24, 0x65	; 101
     1e8:	0e 94 a2 00 	call	0x144	; 0x144 <yellow_blink>

        /* Turn off the pedestrian green light and turn on the pedestrian red light */
        LED_u8Off(PED_GREEN);
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        LED_u8On(PED_RED);
     1f2:	85 e0       	ldi	r24, 0x05	; 5
     1f4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>

        break;
     1f8:	08 95       	ret

    case False:
        /* Turn off the car red light and blink the car yellow LED for 5 sec */
        LED_u8Off(CAR_RED);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>
        yellow_blink(CAR_YELLOW);
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 a2 00 	call	0x144	; 0x144 <yellow_blink>

        /* Check if pedestrian button is pressed while yellow light was blinking */
        pedestrian_mode_green_yellow();
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <pedestrian_mode_green_yellow>
     20a:	08 95       	ret

0000020c <app_start>:
u8 pressedGreen_YellowisOn = False;

void app_start(void)
{
    /* set the call back functions */
    EXTI_u8SetCallBack(TIMER_0, pedestrian_buttonISR);
     20c:	6d e4       	ldi	r22, 0x4D	; 77
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 3d 04 	call	0x87a	; 0x87a <EXTI_u8SetCallBack>
    TMR_u8SetCallBack(TIMER_0, time_is_up);
     216:	69 e4       	ldi	r22, 0x49	; 73
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TMR_u8SetCallBack>

    /* initialize the peripherals */
    DIO_VidInit();
     220:	0e 94 43 02 	call	0x486	; 0x486 <DIO_VidInit>
    GIE_VidEnable();
     224:	0e 94 c6 04 	call	0x98c	; 0x98c <GIE_VidEnable>
    EXTI_VidInit();
     228:	0e 94 24 04 	call	0x848	; 0x848 <EXTI_VidInit>
    TMR_VidInit();
     22c:	0e 94 13 07 	call	0xe26	; 0xe26 <TMR_VidInit>
    LED_VidInit();
     230:	0e 94 90 01 	call	0x320	; 0x320 <LED_VidInit>
    BTN_VidInit();
     234:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BTN_VidInit>

    while (1)
    {
        /* Turn on the car green LED for 5 secs*/
        LED_u8On(CAR_GREEN);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>
        delay_5sec();
     23e:	0e 94 86 00 	call	0x10c	; 0x10c <delay_5sec>
        LED_u8Off(CAR_GREEN);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>

        /* Turn off pedestrian red light in case it was on */
        LED_u8Off(PED_RED);
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	0e 94 16 02 	call	0x42c	; 0x42c <LED_u8Off>

        /* Check if pedestrian button is pressed while green light was on */
        pedestrian_mode_green_yellow();
     24e:	0e 94 c6 00 	call	0x18c	; 0x18c <pedestrian_mode_green_yellow>

        if (pressedGreen_YellowisOn)
     252:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     256:	88 23       	and	r24, r24
     258:	19 f0       	breq	.+6      	; 0x260 <app_start+0x54>
        {
            /* reset the pressedGreen_YellowisOn variable */
            pressedGreen_YellowisOn = False;
     25a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>

            /* go back to normal mode */
            continue;
     25e:	ec cf       	rjmp	.-40     	; 0x238 <app_start+0x2c>
        }

        /* blink the car yellow LED for 5 secs */
        yellow_blink(CAR_YELLOW);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 a2 00 	call	0x144	; 0x144 <yellow_blink>

        pedestrian_mode_green_yellow();
     266:	0e 94 c6 00 	call	0x18c	; 0x18c <pedestrian_mode_green_yellow>

        if (pressedGreen_YellowisOn)
     26a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     26e:	88 23       	and	r24, r24
     270:	19 f0       	breq	.+6      	; 0x278 <app_start+0x6c>
        {
            /* reset the pressedGreen_YellowisOn variable */
            pressedGreen_YellowisOn = False;
     272:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>

            /* go back to normal mode */
            continue;
     276:	e0 cf       	rjmp	.-64     	; 0x238 <app_start+0x2c>
        }

        /* Turn on the car red LED for 5 secs */
        LED_u8On(CAR_RED);
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_u8On>

        /* wait until 5 seconds have passed or if the pedestrian button is pressed while red light was on */
        timeisUp = False;
     27e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <timeisUp>
        TMR_u8SetDesiredTime(TIMER_0, 5 * SEC);
     282:	40 e4       	ldi	r20, 0x40	; 64
     284:	5b e4       	ldi	r21, 0x4B	; 75
     286:	6c e4       	ldi	r22, 0x4C	; 76
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 41 07 	call	0xe82	; 0xe82 <TMR_u8SetDesiredTime>
        while (timeisUp != True && pressedRedisOn != True)
     290:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <timeisUp>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	21 f0       	breq	.+8      	; 0x2a0 <app_start+0x94>
     298:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedRedisOn>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	c1 f7       	brne	.-16     	; 0x290 <app_start+0x84>
            ;

        /* Check if pedestrian button is pressed while green light was on */
        pedestrian_mode_red();
     2a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <pedestrian_mode_red>

        if (pressedRedisOn)
     2a4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedRedisOn>
     2a8:	88 23       	and	r24, r24
     2aa:	31 f2       	breq	.-116    	; 0x238 <app_start+0x2c>
        {
            /* reset the pressedRedisOn variable */
            pressedRedisOn = False;
     2ac:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <pressedRedisOn>

            /* go back to normal mode */
            continue;
     2b0:	c3 cf       	rjmp	.-122    	; 0x238 <app_start+0x2c>

000002b2 <BTN_VidInit>:
 * Description: Function to set the initialized configuration of each Button
 * Inputs: none
 * Output: void
 */
void BTN_VidInit(void)
{
     2b2:	cf 93       	push	r28
	/* Loop on all buttons */
	for (u8 Local_u8ButtonNb = 0; Local_u8ButtonNb < BTN_NUM_OF_BUTTONS; Local_u8ButtonNb++)
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	30 c0       	rjmp	.+96     	; 0x318 <BTN_VidInit+0x66>
	{
		switch (BTN_Au8ButtonConnection[Local_u8ButtonNb])
     2b8:	8c 2f       	mov	r24, r28
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	ef 58       	subi	r30, 0x8F	; 143
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	20 81       	ld	r18, Z
     2c4:	21 30       	cpi	r18, 0x01	; 1
     2c6:	21 f0       	breq	.+8      	; 0x2d0 <BTN_VidInit+0x1e>
     2c8:	d8 f0       	brcs	.+54     	; 0x300 <BTN_VidInit+0x4e>
     2ca:	22 30       	cpi	r18, 0x02	; 2
     2cc:	69 f0       	breq	.+26     	; 0x2e8 <BTN_VidInit+0x36>
     2ce:	23 c0       	rjmp	.+70     	; 0x316 <BTN_VidInit+0x64>
		{
		case BTN_INT_PULL_UP:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT_PULLUP);
     2d0:	fc 01       	movw	r30, r24
     2d2:	e0 5a       	subi	r30, 0xA0	; 160
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	dc 01       	movw	r26, r24
     2d8:	af 59       	subi	r26, 0x9F	; 159
     2da:	bf 4f       	sbci	r27, 0xFF	; 255
     2dc:	41 e0       	ldi	r20, 0x01	; 1
     2de:	60 81       	ld	r22, Z
     2e0:	8c 91       	ld	r24, X
     2e2:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_u8SetPinDirection>
			break;
     2e6:	17 c0       	rjmp	.+46     	; 0x316 <BTN_VidInit+0x64>
		case BTN_EXT_PULL_UP:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
     2e8:	fc 01       	movw	r30, r24
     2ea:	e0 5a       	subi	r30, 0xA0	; 160
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	dc 01       	movw	r26, r24
     2f0:	af 59       	subi	r26, 0x9F	; 159
     2f2:	bf 4f       	sbci	r27, 0xFF	; 255
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	60 81       	ld	r22, Z
     2f8:	8c 91       	ld	r24, X
     2fa:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_u8SetPinDirection>
			break;
     2fe:	0b c0       	rjmp	.+22     	; 0x316 <BTN_VidInit+0x64>
		case BTN_PULL_DOWN:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
     300:	fc 01       	movw	r30, r24
     302:	e0 5a       	subi	r30, 0xA0	; 160
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	dc 01       	movw	r26, r24
     308:	af 59       	subi	r26, 0x9F	; 159
     30a:	bf 4f       	sbci	r27, 0xFF	; 255
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	60 81       	ld	r22, Z
     310:	8c 91       	ld	r24, X
     312:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_u8SetPinDirection>
 * Output: void
 */
void BTN_VidInit(void)
{
	/* Loop on all buttons */
	for (u8 Local_u8ButtonNb = 0; Local_u8ButtonNb < BTN_NUM_OF_BUTTONS; Local_u8ButtonNb++)
     316:	cf 5f       	subi	r28, 0xFF	; 255
     318:	cc 23       	and	r28, r28
     31a:	71 f2       	breq	.-100    	; 0x2b8 <BTN_VidInit+0x6>
		case BTN_PULL_DOWN:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
			break;
		}
	}
}
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <LED_VidInit>:
 * Description: Function to set the initialized configuration of each LED
 * Inputs: none
 * Output: void
 */
void LED_VidInit(void)
{
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
	/* Loop on all LEDs */
	for (u8 Local_u8LEDNb = 0; Local_u8LEDNb < LED_NUM_OF_LEDS; Local_u8LEDNb++)
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	52 c0       	rjmp	.+164    	; 0x3ce <LED_VidInit+0xae>
	{
		/* Set pin direction to output */
		DIO_u8SetPinDirection(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], OUTPUT);
     32a:	c1 2f       	mov	r28, r17
     32c:	d0 e0       	ldi	r29, 0x00	; 0
     32e:	de 01       	movw	r26, r28
     330:	ae 59       	subi	r26, 0x9E	; 158
     332:	bf 4f       	sbci	r27, 0xFF	; 255
     334:	fe 01       	movw	r30, r28
     336:	e8 59       	subi	r30, 0x98	; 152
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	42 e0       	ldi	r20, 0x02	; 2
     33c:	6c 91       	ld	r22, X
     33e:	80 81       	ld	r24, Z
     340:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_u8SetPinDirection>

		/* Setting LED to init state */
		switch (LED_Au8LedDirection[Local_u8LEDNb])
     344:	fe 01       	movw	r30, r28
     346:	e8 58       	subi	r30, 0x88	; 136
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	80 81       	ld	r24, Z
     34c:	88 23       	and	r24, r24
     34e:	19 f0       	breq	.+6      	; 0x356 <LED_VidInit+0x36>
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	f9 f0       	breq	.+62     	; 0x392 <LED_VidInit+0x72>
     354:	3b c0       	rjmp	.+118    	; 0x3cc <LED_VidInit+0xac>
		{
		case LED_FORWARD:
			switch (LED_Au8LedState[Local_u8LEDNb])
     356:	fe 01       	movw	r30, r28
     358:	ee 58       	subi	r30, 0x8E	; 142
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	80 81       	ld	r24, Z
     35e:	88 23       	and	r24, r24
     360:	69 f0       	breq	.+26     	; 0x37c <LED_VidInit+0x5c>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	99 f5       	brne	.+102    	; 0x3cc <LED_VidInit+0xac>
			{
			case LED_ON:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], HIGH);
     366:	fe 01       	movw	r30, r28
     368:	ee 59       	subi	r30, 0x9E	; 158
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	c8 59       	subi	r28, 0x98	; 152
     36e:	df 4f       	sbci	r29, 0xFF	; 255
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	60 81       	ld	r22, Z
     374:	88 81       	ld	r24, Y
     376:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
				break;
     37a:	28 c0       	rjmp	.+80     	; 0x3cc <LED_VidInit+0xac>
			case LED_OFF:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], LOW);
     37c:	fe 01       	movw	r30, r28
     37e:	ee 59       	subi	r30, 0x9E	; 158
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	c8 59       	subi	r28, 0x98	; 152
     384:	df 4f       	sbci	r29, 0xFF	; 255
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	60 81       	ld	r22, Z
     38a:	88 81       	ld	r24, Y
     38c:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
				break;
     390:	1d c0       	rjmp	.+58     	; 0x3cc <LED_VidInit+0xac>
			}
			break;

		case LED_REVERSE:
			switch (LED_Au8LedState[Local_u8LEDNb])
     392:	fe 01       	movw	r30, r28
     394:	ee 58       	subi	r30, 0x8E	; 142
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	80 81       	ld	r24, Z
     39a:	88 23       	and	r24, r24
     39c:	69 f0       	breq	.+26     	; 0x3b8 <LED_VidInit+0x98>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	a9 f4       	brne	.+42     	; 0x3cc <LED_VidInit+0xac>
			{
			case LED_ON:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], LOW);
     3a2:	fe 01       	movw	r30, r28
     3a4:	ee 59       	subi	r30, 0x9E	; 158
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	c8 59       	subi	r28, 0x98	; 152
     3aa:	df 4f       	sbci	r29, 0xFF	; 255
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	60 81       	ld	r22, Z
     3b0:	88 81       	ld	r24, Y
     3b2:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
				break;
     3b6:	0a c0       	rjmp	.+20     	; 0x3cc <LED_VidInit+0xac>
			case LED_OFF:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], HIGH);
     3b8:	fe 01       	movw	r30, r28
     3ba:	ee 59       	subi	r30, 0x9E	; 158
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	c8 59       	subi	r28, 0x98	; 152
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	60 81       	ld	r22, Z
     3c6:	88 81       	ld	r24, Y
     3c8:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
 * Output: void
 */
void LED_VidInit(void)
{
	/* Loop on all LEDs */
	for (u8 Local_u8LEDNb = 0; Local_u8LEDNb < LED_NUM_OF_LEDS; Local_u8LEDNb++)
     3cc:	1f 5f       	subi	r17, 0xFF	; 255
     3ce:	16 30       	cpi	r17, 0x06	; 6
     3d0:	08 f4       	brcc	.+2      	; 0x3d4 <LED_VidInit+0xb4>
     3d2:	ab cf       	rjmp	.-170    	; 0x32a <LED_VidInit+0xa>
				break;
			}
			break;
		}
	}
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	08 95       	ret

000003dc <LED_u8On>:
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
     3dc:	86 30       	cpi	r24, 0x06	; 6
     3de:	10 f5       	brcc	.+68     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	}

	else
	{
		/* Check if the LED is forward or reverse */
		switch (LED_Au8LedDirection[Copy_u8LedNumber])
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	e8 58       	subi	r30, 0x88	; 136
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	20 81       	ld	r18, Z
     3ea:	22 23       	and	r18, r18
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <LED_u8On+0x18>
     3ee:	21 30       	cpi	r18, 0x01	; 1
     3f0:	69 f0       	breq	.+26     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f2:	1a c0       	rjmp	.+52     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		{
		case LED_FORWARD:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], HIGH);
     3f4:	fc 01       	movw	r30, r24
     3f6:	ee 59       	subi	r30, 0x9E	; 158
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	60 81       	ld	r22, Z
     3fc:	fc 01       	movw	r30, r24
     3fe:	e8 59       	subi	r30, 0x98	; 152
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	80 81       	ld	r24, Z
     406:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
			break;
     40a:	08 95       	ret
		case LED_REVERSE:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], LOW);
     40c:	fc 01       	movw	r30, r24
     40e:	ee 59       	subi	r30, 0x9E	; 158
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	60 81       	ld	r22, Z
     414:	fc 01       	movw	r30, r24
     416:	e8 59       	subi	r30, 0x98	; 152
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
			break;
     422:	08 95       	ret

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
	{
		/* Set the error state to Error */
		Local_u8ErrorState = STATUS_ERROR;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	08 95       	ret
 * Output: the Error state of the function
 */
u8 LED_u8On(u8 Copy_u8LedNumber)
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;
     428:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Return the error state */
	return Local_u8ErrorState;
}
     42a:	08 95       	ret

0000042c <LED_u8Off>:
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
     42c:	86 30       	cpi	r24, 0x06	; 6
     42e:	10 f5       	brcc	.+68     	; 0x474 <LED_u8Off+0x48>
	}

	else
	{
		/* Check if the LED is forward or reverse */
		switch (LED_Au8LedDirection[Copy_u8LedNumber])
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	e8 58       	subi	r30, 0x88	; 136
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	20 81       	ld	r18, Z
     43a:	22 23       	and	r18, r18
     43c:	19 f0       	breq	.+6      	; 0x444 <LED_u8Off+0x18>
     43e:	21 30       	cpi	r18, 0x01	; 1
     440:	69 f0       	breq	.+26     	; 0x45c <LED_u8Off+0x30>
     442:	1a c0       	rjmp	.+52     	; 0x478 <LED_u8Off+0x4c>
		{
		case LED_FORWARD:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], LOW);
     444:	fc 01       	movw	r30, r24
     446:	ee 59       	subi	r30, 0x9E	; 158
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	60 81       	ld	r22, Z
     44c:	fc 01       	movw	r30, r24
     44e:	e8 59       	subi	r30, 0x98	; 152
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
			break;
     45a:	08 95       	ret
		case LED_REVERSE:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], HIGH);
     45c:	fc 01       	movw	r30, r24
     45e:	ee 59       	subi	r30, 0x9E	; 158
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	60 81       	ld	r22, Z
     464:	fc 01       	movw	r30, r24
     466:	e8 59       	subi	r30, 0x98	; 152
     468:	ff 4f       	sbci	r31, 0xFF	; 255
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	80 81       	ld	r24, Z
     46e:	0e 94 44 03 	call	0x688	; 0x688 <DIO_u8SetPinValue>
			break;
     472:	08 95       	ret

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
	{
		/* Set the error state to Error */
		Local_u8ErrorState = STATUS_ERROR;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
 * Output: the Error state of the function
 */
u8 LED_u8Off(u8 Copy_u8LedNumber)
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;
     478:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Return the error state */
	return Local_u8ErrorState;
}
     47a:	08 95       	ret

0000047c <main>:

#include "APP/app_interface.h"

int main(void)
{
    app_start();
     47c:	0e 94 06 01 	call	0x20c	; 0x20c <app_start>
    return 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	08 95       	ret

00000486 <DIO_VidInit>:
        Local_u8Error = STATUS_OK;
    }

    /* Function return */
    return Local_u8Error;
}
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	8a bb       	out	0x1a, r24	; 26
     48a:	87 bb       	out	0x17, r24	; 23
     48c:	14 ba       	out	0x14, r1	; 20
     48e:	11 ba       	out	0x11, r1	; 17
     490:	1b ba       	out	0x1b, r1	; 27
     492:	18 ba       	out	0x18, r1	; 24
     494:	15 ba       	out	0x15, r1	; 21
     496:	12 ba       	out	0x12, r1	; 18
     498:	08 95       	ret

0000049a <DIO_u8SetPinDirection>:
     49a:	85 30       	cpi	r24, 0x05	; 5
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <DIO_u8SetPinDirection+0x6>
     49e:	e6 c0       	rjmp	.+460    	; 0x66c <DIO_u8SetPinDirection+0x1d2>
     4a0:	68 30       	cpi	r22, 0x08	; 8
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <DIO_u8SetPinDirection+0xc>
     4a4:	e5 c0       	rjmp	.+458    	; 0x670 <DIO_u8SetPinDirection+0x1d6>
     4a6:	43 30       	cpi	r20, 0x03	; 3
     4a8:	08 f0       	brcs	.+2      	; 0x4ac <DIO_u8SetPinDirection+0x12>
     4aa:	e4 c0       	rjmp	.+456    	; 0x674 <DIO_u8SetPinDirection+0x1da>
     4ac:	41 11       	cpse	r20, r1
     4ae:	4f c0       	rjmp	.+158    	; 0x54e <DIO_u8SetPinDirection+0xb4>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	d1 f0       	breq	.+52     	; 0x4e8 <DIO_u8SetPinDirection+0x4e>
     4b4:	18 f4       	brcc	.+6      	; 0x4bc <DIO_u8SetPinDirection+0x22>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	31 f0       	breq	.+12     	; 0x4c6 <DIO_u8SetPinDirection+0x2c>
     4ba:	de c0       	rjmp	.+444    	; 0x678 <DIO_u8SetPinDirection+0x1de>
     4bc:	83 30       	cpi	r24, 0x03	; 3
     4be:	29 f1       	breq	.+74     	; 0x50a <DIO_u8SetPinDirection+0x70>
     4c0:	84 30       	cpi	r24, 0x04	; 4
     4c2:	a1 f1       	breq	.+104    	; 0x52c <DIO_u8SetPinDirection+0x92>
     4c4:	d9 c0       	rjmp	.+434    	; 0x678 <DIO_u8SetPinDirection+0x1de>
     4c6:	2a b3       	in	r18, 0x1a	; 26
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_u8SetPinDirection+0x38>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	6a 95       	dec	r22
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_u8SetPinDirection+0x34>
     4d6:	80 95       	com	r24
     4d8:	92 2f       	mov	r25, r18
     4da:	98 23       	and	r25, r24
     4dc:	9a bb       	out	0x1a, r25	; 26
     4de:	9b b3       	in	r25, 0x1b	; 27
     4e0:	89 23       	and	r24, r25
     4e2:	8b bb       	out	0x1b, r24	; 27
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	08 95       	ret
     4e8:	27 b3       	in	r18, 0x17	; 23
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_u8SetPinDirection+0x5a>
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_u8SetPinDirection+0x56>
     4f8:	80 95       	com	r24
     4fa:	92 2f       	mov	r25, r18
     4fc:	98 23       	and	r25, r24
     4fe:	97 bb       	out	0x17, r25	; 23
     500:	98 b3       	in	r25, 0x18	; 24
     502:	89 23       	and	r24, r25
     504:	88 bb       	out	0x18, r24	; 24
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
     50a:	24 b3       	in	r18, 0x14	; 20
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_u8SetPinDirection+0x7c>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	6a 95       	dec	r22
     518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_u8SetPinDirection+0x78>
     51a:	80 95       	com	r24
     51c:	92 2f       	mov	r25, r18
     51e:	98 23       	and	r25, r24
     520:	94 bb       	out	0x14, r25	; 20
     522:	95 b3       	in	r25, 0x15	; 21
     524:	89 23       	and	r24, r25
     526:	85 bb       	out	0x15, r24	; 21
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
     52c:	21 b3       	in	r18, 0x11	; 17
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8SetPinDirection+0x9e>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	6a 95       	dec	r22
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8SetPinDirection+0x9a>
     53c:	80 95       	com	r24
     53e:	92 2f       	mov	r25, r18
     540:	98 23       	and	r25, r24
     542:	91 bb       	out	0x11, r25	; 17
     544:	92 b3       	in	r25, 0x12	; 18
     546:	89 23       	and	r24, r25
     548:	82 bb       	out	0x12, r24	; 18
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret
     54e:	41 30       	cpi	r20, 0x01	; 1
     550:	09 f0       	breq	.+2      	; 0x554 <DIO_u8SetPinDirection+0xba>
     552:	4e c0       	rjmp	.+156    	; 0x5f0 <DIO_u8SetPinDirection+0x156>
     554:	90 b7       	in	r25, 0x30	; 48
     556:	9b 7f       	andi	r25, 0xFB	; 251
     558:	90 bf       	out	0x30, r25	; 48
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	c9 f0       	breq	.+50     	; 0x590 <DIO_u8SetPinDirection+0xf6>
     55e:	18 f4       	brcc	.+6      	; 0x566 <DIO_u8SetPinDirection+0xcc>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	31 f0       	breq	.+12     	; 0x570 <DIO_u8SetPinDirection+0xd6>
     564:	8b c0       	rjmp	.+278    	; 0x67c <DIO_u8SetPinDirection+0x1e2>
     566:	83 30       	cpi	r24, 0x03	; 3
     568:	19 f1       	breq	.+70     	; 0x5b0 <DIO_u8SetPinDirection+0x116>
     56a:	84 30       	cpi	r24, 0x04	; 4
     56c:	89 f1       	breq	.+98     	; 0x5d0 <DIO_u8SetPinDirection+0x136>
     56e:	86 c0       	rjmp	.+268    	; 0x67c <DIO_u8SetPinDirection+0x1e2>
     570:	2a b3       	in	r18, 0x1a	; 26
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_u8SetPinDirection+0xe2>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	6a 95       	dec	r22
     57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_u8SetPinDirection+0xde>
     580:	92 2f       	mov	r25, r18
     582:	98 2b       	or	r25, r24
     584:	9a bb       	out	0x1a, r25	; 26
     586:	9b b3       	in	r25, 0x1b	; 27
     588:	89 2b       	or	r24, r25
     58a:	8b bb       	out	0x1b, r24	; 27
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	08 95       	ret
     590:	27 b3       	in	r18, 0x17	; 23
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_u8SetPinDirection+0x102>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	6a 95       	dec	r22
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_u8SetPinDirection+0xfe>
     5a0:	92 2f       	mov	r25, r18
     5a2:	98 2b       	or	r25, r24
     5a4:	97 bb       	out	0x17, r25	; 23
     5a6:	98 b3       	in	r25, 0x18	; 24
     5a8:	89 2b       	or	r24, r25
     5aa:	88 bb       	out	0x18, r24	; 24
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	08 95       	ret
     5b0:	24 b3       	in	r18, 0x14	; 20
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_u8SetPinDirection+0x122>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	6a 95       	dec	r22
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_u8SetPinDirection+0x11e>
     5c0:	92 2f       	mov	r25, r18
     5c2:	98 2b       	or	r25, r24
     5c4:	94 bb       	out	0x14, r25	; 20
     5c6:	95 b3       	in	r25, 0x15	; 21
     5c8:	89 2b       	or	r24, r25
     5ca:	85 bb       	out	0x15, r24	; 21
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	08 95       	ret
     5d0:	21 b3       	in	r18, 0x11	; 17
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_u8SetPinDirection+0x142>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_u8SetPinDirection+0x13e>
     5e0:	92 2f       	mov	r25, r18
     5e2:	98 2b       	or	r25, r24
     5e4:	91 bb       	out	0x11, r25	; 17
     5e6:	92 b3       	in	r25, 0x12	; 18
     5e8:	89 2b       	or	r24, r25
     5ea:	82 bb       	out	0x12, r24	; 18
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	08 95       	ret
     5f0:	42 30       	cpi	r20, 0x02	; 2
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <DIO_u8SetPinDirection+0x15c>
     5f4:	45 c0       	rjmp	.+138    	; 0x680 <DIO_u8SetPinDirection+0x1e6>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	a9 f0       	breq	.+42     	; 0x624 <DIO_u8SetPinDirection+0x18a>
     5fa:	18 f4       	brcc	.+6      	; 0x602 <DIO_u8SetPinDirection+0x168>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	31 f0       	breq	.+12     	; 0x60c <DIO_u8SetPinDirection+0x172>
     600:	41 c0       	rjmp	.+130    	; 0x684 <DIO_u8SetPinDirection+0x1ea>
     602:	83 30       	cpi	r24, 0x03	; 3
     604:	d9 f0       	breq	.+54     	; 0x63c <DIO_u8SetPinDirection+0x1a2>
     606:	84 30       	cpi	r24, 0x04	; 4
     608:	29 f1       	breq	.+74     	; 0x654 <DIO_u8SetPinDirection+0x1ba>
     60a:	3c c0       	rjmp	.+120    	; 0x684 <DIO_u8SetPinDirection+0x1ea>
     60c:	2a b3       	in	r18, 0x1a	; 26
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8SetPinDirection+0x17e>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8SetPinDirection+0x17a>
     61c:	82 2b       	or	r24, r18
     61e:	8a bb       	out	0x1a, r24	; 26
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	08 95       	ret
     624:	27 b3       	in	r18, 0x17	; 23
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8SetPinDirection+0x196>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	6a 95       	dec	r22
     632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8SetPinDirection+0x192>
     634:	82 2b       	or	r24, r18
     636:	87 bb       	out	0x17, r24	; 23
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	08 95       	ret
     63c:	24 b3       	in	r18, 0x14	; 20
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_u8SetPinDirection+0x1ae>
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	6a 95       	dec	r22
     64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_u8SetPinDirection+0x1aa>
     64c:	82 2b       	or	r24, r18
     64e:	84 bb       	out	0x14, r24	; 20
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret
     654:	21 b3       	in	r18, 0x11	; 17
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_u8SetPinDirection+0x1c6>
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	6a 95       	dec	r22
     662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_u8SetPinDirection+0x1c2>
     664:	82 2b       	or	r24, r18
     666:	81 bb       	out	0x11, r24	; 17
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	08 95       	ret
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	08 95       	ret
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	08 95       	ret
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret

00000688 <DIO_u8SetPinValue>:
     688:	85 30       	cpi	r24, 0x05	; 5
     68a:	08 f0       	brcs	.+2      	; 0x68e <DIO_u8SetPinValue+0x6>
     68c:	84 c0       	rjmp	.+264    	; 0x796 <DIO_u8SetPinValue+0x10e>
     68e:	68 30       	cpi	r22, 0x08	; 8
     690:	08 f0       	brcs	.+2      	; 0x694 <DIO_u8SetPinValue+0xc>
     692:	83 c0       	rjmp	.+262    	; 0x79a <DIO_u8SetPinValue+0x112>
     694:	42 30       	cpi	r20, 0x02	; 2
     696:	08 f0       	brcs	.+2      	; 0x69a <DIO_u8SetPinValue+0x12>
     698:	82 c0       	rjmp	.+260    	; 0x79e <DIO_u8SetPinValue+0x116>
     69a:	41 30       	cpi	r20, 0x01	; 1
     69c:	d9 f5       	brne	.+118    	; 0x714 <DIO_u8SetPinValue+0x8c>
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	a9 f0       	breq	.+42     	; 0x6cc <DIO_u8SetPinValue+0x44>
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <DIO_u8SetPinValue+0x22>
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	31 f0       	breq	.+12     	; 0x6b4 <DIO_u8SetPinValue+0x2c>
     6a8:	7c c0       	rjmp	.+248    	; 0x7a2 <DIO_u8SetPinValue+0x11a>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	d9 f0       	breq	.+54     	; 0x6e4 <DIO_u8SetPinValue+0x5c>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	29 f1       	breq	.+74     	; 0x6fc <DIO_u8SetPinValue+0x74>
     6b2:	77 c0       	rjmp	.+238    	; 0x7a2 <DIO_u8SetPinValue+0x11a>
     6b4:	2b b3       	in	r18, 0x1b	; 27
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_u8SetPinValue+0x38>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	6a 95       	dec	r22
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_u8SetPinValue+0x34>
     6c4:	82 2b       	or	r24, r18
     6c6:	8b bb       	out	0x1b, r24	; 27
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 95       	ret
     6cc:	28 b3       	in	r18, 0x18	; 24
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_u8SetPinValue+0x50>
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	6a 95       	dec	r22
     6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_u8SetPinValue+0x4c>
     6dc:	82 2b       	or	r24, r18
     6de:	88 bb       	out	0x18, r24	; 24
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	08 95       	ret
     6e4:	25 b3       	in	r18, 0x15	; 21
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_u8SetPinValue+0x68>
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	6a 95       	dec	r22
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_u8SetPinValue+0x64>
     6f4:	82 2b       	or	r24, r18
     6f6:	85 bb       	out	0x15, r24	; 21
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	08 95       	ret
     6fc:	22 b3       	in	r18, 0x12	; 18
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_u8SetPinValue+0x80>
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	6a 95       	dec	r22
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_u8SetPinValue+0x7c>
     70c:	82 2b       	or	r24, r18
     70e:	82 bb       	out	0x12, r24	; 18
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	08 95       	ret
     714:	41 11       	cpse	r20, r1
     716:	47 c0       	rjmp	.+142    	; 0x7a6 <DIO_u8SetPinValue+0x11e>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	b1 f0       	breq	.+44     	; 0x748 <DIO_u8SetPinValue+0xc0>
     71c:	18 f4       	brcc	.+6      	; 0x724 <DIO_u8SetPinValue+0x9c>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	31 f0       	breq	.+12     	; 0x72e <DIO_u8SetPinValue+0xa6>
     722:	43 c0       	rjmp	.+134    	; 0x7aa <DIO_u8SetPinValue+0x122>
     724:	83 30       	cpi	r24, 0x03	; 3
     726:	e9 f0       	breq	.+58     	; 0x762 <DIO_u8SetPinValue+0xda>
     728:	84 30       	cpi	r24, 0x04	; 4
     72a:	41 f1       	breq	.+80     	; 0x77c <DIO_u8SetPinValue+0xf4>
     72c:	3e c0       	rjmp	.+124    	; 0x7aa <DIO_u8SetPinValue+0x122>
     72e:	2b b3       	in	r18, 0x1b	; 27
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_u8SetPinValue+0xb2>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	6a 95       	dec	r22
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_u8SetPinValue+0xae>
     73e:	80 95       	com	r24
     740:	82 23       	and	r24, r18
     742:	8b bb       	out	0x1b, r24	; 27
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
     748:	28 b3       	in	r18, 0x18	; 24
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_u8SetPinValue+0xcc>
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	6a 95       	dec	r22
     756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_u8SetPinValue+0xc8>
     758:	80 95       	com	r24
     75a:	82 23       	and	r24, r18
     75c:	88 bb       	out	0x18, r24	; 24
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret
     762:	25 b3       	in	r18, 0x15	; 21
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_u8SetPinValue+0xe6>
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	6a 95       	dec	r22
     770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_u8SetPinValue+0xe2>
     772:	80 95       	com	r24
     774:	82 23       	and	r24, r18
     776:	85 bb       	out	0x15, r24	; 21
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	08 95       	ret
     77c:	22 b3       	in	r18, 0x12	; 18
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8SetPinValue+0x100>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	6a 95       	dec	r22
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_u8SetPinValue+0xfc>
     78c:	80 95       	com	r24
     78e:	82 23       	and	r24, r18
     790:	82 bb       	out	0x12, r24	; 18
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	08 95       	ret
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	08 95       	ret
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	08 95       	ret
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	08 95       	ret
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	08 95       	ret
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret

000007ae <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8PinValue)
{
    /*Local Variable holding the error state*/
    u8 Local_u8Error;

    if ((Copy_u8Port > PORT_D) || (Copy_u8Pin > PIN_7) || (Copy_Pu8PinValue == NULL))
     7ae:	85 30       	cpi	r24, 0x05	; 5
     7b0:	08 f0       	brcs	.+2      	; 0x7b4 <DIO_u8GetPinValue+0x6>
     7b2:	42 c0       	rjmp	.+132    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7b4:	68 30       	cpi	r22, 0x08	; 8
     7b6:	08 f0       	brcs	.+2      	; 0x7ba <DIO_u8GetPinValue+0xc>
     7b8:	41 c0       	rjmp	.+130    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7ba:	41 15       	cp	r20, r1
     7bc:	51 05       	cpc	r21, r1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <DIO_u8GetPinValue+0x14>
     7c0:	3f c0       	rjmp	.+126    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
        Local_u8Error = STATUS_ERROR;
    }

    else
    {
        switch (Copy_u8Port)
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	a9 f0       	breq	.+42     	; 0x7f0 <DIO_u8GetPinValue+0x42>
     7c6:	18 f4       	brcc	.+6      	; 0x7ce <DIO_u8GetPinValue+0x20>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	31 f0       	breq	.+12     	; 0x7d8 <DIO_u8GetPinValue+0x2a>
     7cc:	3b c0       	rjmp	.+118    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	d9 f0       	breq	.+54     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7d2:	84 30       	cpi	r24, 0x04	; 4
     7d4:	29 f1       	breq	.+74     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7d6:	36 c0       	rjmp	.+108    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
        {
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
     7d8:	89 b3       	in	r24, 0x19	; 25
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_u8GetPinValue+0x34>
     7de:	95 95       	asr	r25
     7e0:	87 95       	ror	r24
     7e2:	6a 95       	dec	r22
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_u8GetPinValue+0x30>
     7e6:	81 70       	andi	r24, 0x01	; 1
     7e8:	fa 01       	movw	r30, r20
     7ea:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
    {
        switch (Copy_u8Port)
        {
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
            break;
     7ee:	08 95       	ret
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
     7f0:	86 b3       	in	r24, 0x16	; 22
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_u8GetPinValue+0x4c>
     7f6:	95 95       	asr	r25
     7f8:	87 95       	ror	r24
     7fa:	6a 95       	dec	r22
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_u8GetPinValue+0x48>
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	fa 01       	movw	r30, r20
     802:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     804:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
            break;
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
            break;
     806:	08 95       	ret
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
     808:	83 b3       	in	r24, 0x13	; 19
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	95 95       	asr	r25
     810:	87 95       	ror	r24
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	81 70       	andi	r24, 0x01	; 1
     818:	fa 01       	movw	r30, r20
     81a:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     81c:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
            break;
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
            break;
     81e:	08 95       	ret
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
     820:	80 b3       	in	r24, 0x10	; 16
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	95 95       	asr	r25
     828:	87 95       	ror	r24
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	fa 01       	movw	r30, r20
     832:	80 83       	st	Z, r24
            break;
        }
        Local_u8Error = STATUS_OK;
     834:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
     836:	08 95       	ret
    /*Local Variable holding the error state*/
    u8 Local_u8Error;

    if ((Copy_u8Port > PORT_D) || (Copy_u8Pin > PIN_7) || (Copy_Pu8PinValue == NULL))
    {
        Local_u8Error = STATUS_ERROR;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 95       	ret
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     844:	80 e0       	ldi	r24, 0x00	; 0
    }

    /* Function return */
    return Local_u8Error;
}
     846:	08 95       	ret

00000848 <EXTI_VidInit>:
        }
    }

    /* Return the error state */
    return Local_u8ErrorState;
}
     848:	8b b7       	in	r24, 0x3b	; 59
     84a:	80 64       	ori	r24, 0x40	; 64
     84c:	8b bf       	out	0x3b, r24	; 59
     84e:	8b b7       	in	r24, 0x3b	; 59
     850:	8f 77       	andi	r24, 0x7F	; 127
     852:	8b bf       	out	0x3b, r24	; 59
     854:	8b b7       	in	r24, 0x3b	; 59
     856:	8f 7d       	andi	r24, 0xDF	; 223
     858:	8b bf       	out	0x3b, r24	; 59
     85a:	85 b7       	in	r24, 0x35	; 53
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	85 bf       	out	0x35, r24	; 53
     860:	85 b7       	in	r24, 0x35	; 53
     862:	81 60       	ori	r24, 0x01	; 1
     864:	85 bf       	out	0x35, r24	; 53
     866:	85 b7       	in	r24, 0x35	; 53
     868:	87 7f       	andi	r24, 0xF7	; 247
     86a:	85 bf       	out	0x35, r24	; 53
     86c:	85 b7       	in	r24, 0x35	; 53
     86e:	8b 7f       	andi	r24, 0xFB	; 251
     870:	85 bf       	out	0x35, r24	; 53
     872:	84 b7       	in	r24, 0x34	; 52
     874:	8f 7b       	andi	r24, 0xBF	; 191
     876:	84 bf       	out	0x34, r24	; 52
     878:	08 95       	ret

0000087a <EXTI_u8SetCallBack>:
u8 EXTI_u8SetCallBack(u8 Copy_u8IntNumber, void (*Copy_PVCallBack)(void))
{
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = STATUS_OK;

    if (Copy_u8IntNumber >= EXTI_NO_OF_EXTI)
     87a:	83 30       	cpi	r24, 0x03	; 3
     87c:	50 f4       	brcc	.+20     	; 0x892 <EXTI_u8SetCallBack+0x18>
        Local_u8ErrorState = STATUS_ERROR;
    }

    else
    {
        PVCallBack[Copy_u8IntNumber] = Copy_PVCallBack;
     87e:	e8 2f       	mov	r30, r24
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e2 58       	subi	r30, 0x82	; 130
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	60 83       	st	Z, r22
 * Output: the Error state of the function
 */
u8 EXTI_u8SetCallBack(u8 Copy_u8IntNumber, void (*Copy_PVCallBack)(void))
{
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = STATUS_OK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret

    if (Copy_u8IntNumber >= EXTI_NO_OF_EXTI)
    {
        Local_u8ErrorState = STATUS_ERROR;
     892:	81 e0       	ldi	r24, 0x01	; 1
        PVCallBack[Copy_u8IntNumber] = Copy_PVCallBack;
    }

    /* Return the error state */
    return Local_u8ErrorState;
}
     894:	08 95       	ret

00000896 <__vector_1>:

/* The ISR of the external interrupt INT0 */
void __vector_1(void)
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT0] != NULL)
     8b8:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <PVCallBack>
     8bc:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <PVCallBack+0x1>
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <__vector_1+0x30>
        PVCallBack[EXTI_INT0]();
     8c4:	09 95       	icall
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <__vector_2>:

/* The ISR of the external interrupt INT1 */
void __vector_2(void)
{
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	4f 93       	push	r20
     8f8:	5f 93       	push	r21
     8fa:	6f 93       	push	r22
     8fc:	7f 93       	push	r23
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	ef 93       	push	r30
     908:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT1] != NULL)
     90a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <PVCallBack+0x2>
     90e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <PVCallBack+0x3>
     912:	30 97       	sbiw	r30, 0x00	; 0
     914:	09 f0       	breq	.+2      	; 0x918 <__vector_2+0x30>
        PVCallBack[EXTI_INT1]();
     916:	09 95       	icall
}
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	1f 90       	pop	r1
     938:	18 95       	reti

0000093a <__vector_3>:

/* The ISR of the external interrupt INT2 */
void __vector_3(void)
{
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT2] != NULL)
     95c:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <PVCallBack+0x4>
     960:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <PVCallBack+0x5>
     964:	30 97       	sbiw	r30, 0x00	; 0
     966:	09 f0       	breq	.+2      	; 0x96a <__vector_3+0x30>
        PVCallBack[EXTI_INT2]();
     968:	09 95       	icall
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <GIE_VidEnable>:
 * Inputs: void
 * Output: void
 */
void GIE_VidEnable(void)
{
    SET_BIT(SREG, SREG_I_BIT);
     98c:	8f b7       	in	r24, 0x3f	; 63
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	8f bf       	out	0x3f, r24	; 63
     992:	08 95       	ret

00000994 <TMR_VidSetTIMER0OVFTime>:
    {
        *Copy_Pu16OffTime = (TMR_u16TotalTime - TMR_u16ONTime) * TMR_TIMER1_TICKTIME;
    }
    /* Function return Error state */
    return Local_u8Error;
}
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	6b 01       	movw	r12, r22
     9a6:	7c 01       	movw	r14, r24
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e8       	ldi	r20, 0x80	; 128
     9ae:	5f e3       	ldi	r21, 0x3F	; 63
     9b0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     9b4:	81 11       	cpse	r24, r1
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <TMR_VidSetTIMER0OVFTime+0x50>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <TMR_u32ReqTimer0Cntr>
     9c4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
     9c8:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
     9cc:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
     9d0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <TMR_u32Timer0Preload>
     9d4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <TMR_u32Timer0Preload+0x1>
     9d8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <TMR_u32Timer0Preload+0x2>
     9dc:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <TMR_u32Timer0Preload+0x3>
     9e0:	12 be       	out	0x32, r1	; 50
     9e2:	8e c0       	rjmp	.+284    	; 0xb00 <TMR_VidSetTIMER0OVFTime+0x16c>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 e8       	ldi	r20, 0x80	; 128
     9ea:	5f e3       	ldi	r21, 0x3F	; 63
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 af 0b 	call	0x175e	; 0x175e <__gesf2>
     9f4:	18 16       	cp	r1, r24
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <TMR_VidSetTIMER0OVFTime+0x66>
     9f8:	52 c0       	rjmp	.+164    	; 0xa9e <TMR_VidSetTIMER0OVFTime+0x10a>
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     a02:	4b 01       	movw	r8, r22
     a04:	5c 01       	movw	r10, r24
     a06:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c7 01       	movw	r24, r14
     a10:	b6 01       	movw	r22, r12
     a12:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     a16:	6b 01       	movw	r12, r22
     a18:	7c 01       	movw	r14, r24
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	a9 01       	movw	r20, r18
     a20:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     a24:	81 11       	cpse	r24, r1
     a26:	12 c0       	rjmp	.+36     	; 0xa4c <TMR_VidSetTIMER0OVFTime+0xb8>
     a28:	80 92 9d 00 	sts	0x009D, r8	; 0x80009d <TMR_u32ReqTimer0Cntr>
     a2c:	90 92 9e 00 	sts	0x009E, r9	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
     a30:	a0 92 9f 00 	sts	0x009F, r10	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
     a34:	b0 92 a0 00 	sts	0x00A0, r11	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
     a38:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <TMR_u32Timer0Preload>
     a3c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <TMR_u32Timer0Preload+0x1>
     a40:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <TMR_u32Timer0Preload+0x2>
     a44:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <TMR_u32Timer0Preload+0x3>
     a48:	12 be       	out	0x32, r1	; 50
     a4a:	5a c0       	rjmp	.+180    	; 0xb00 <TMR_VidSetTIMER0OVFTime+0x16c>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 e8       	ldi	r20, 0x80	; 128
     a52:	53 e4       	ldi	r21, 0x43	; 67
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e8       	ldi	r24, 0x80	; 128
     a66:	93 e4       	ldi	r25, 0x43	; 67
     a68:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     a6c:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	82 1a       	sub	r8, r18
     a74:	92 0a       	sbc	r9, r18
     a76:	a2 0a       	sbc	r10, r18
     a78:	b2 0a       	sbc	r11, r18
     a7a:	80 92 9d 00 	sts	0x009D, r8	; 0x80009d <TMR_u32ReqTimer0Cntr>
     a7e:	90 92 9e 00 	sts	0x009E, r9	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
     a82:	a0 92 9f 00 	sts	0x009F, r10	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
     a86:	b0 92 a0 00 	sts	0x00A0, r11	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
     a8a:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <TMR_u32Timer0Preload>
     a8e:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <TMR_u32Timer0Preload+0x1>
     a92:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <TMR_u32Timer0Preload+0x2>
     a96:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <TMR_u32Timer0Preload+0x3>
     a9a:	62 bf       	out	0x32, r22	; 50
     a9c:	31 c0       	rjmp	.+98     	; 0xb00 <TMR_VidSetTIMER0OVFTime+0x16c>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	5f e3       	ldi	r21, 0x3F	; 63
     aa6:	c7 01       	movw	r24, r14
     aa8:	b6 01       	movw	r22, r12
     aaa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     aae:	88 23       	and	r24, r24
     ab0:	3c f5       	brge	.+78     	; 0xb00 <TMR_VidSetTIMER0OVFTime+0x16c>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e8       	ldi	r20, 0x80	; 128
     ab8:	53 e4       	ldi	r21, 0x43	; 67
     aba:	c7 01       	movw	r24, r14
     abc:	b6 01       	movw	r22, r12
     abe:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	93 e4       	ldi	r25, 0x43	; 67
     ace:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     ad2:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     ad6:	c1 2c       	mov	r12, r1
     ad8:	d1 2c       	mov	r13, r1
     ada:	76 01       	movw	r14, r12
     adc:	c3 94       	inc	r12
     ade:	c0 92 9d 00 	sts	0x009D, r12	; 0x80009d <TMR_u32ReqTimer0Cntr>
     ae2:	d0 92 9e 00 	sts	0x009E, r13	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
     ae6:	e0 92 9f 00 	sts	0x009F, r14	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
     aea:	f0 92 a0 00 	sts	0x00A0, r15	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
     aee:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <TMR_u32Timer0Preload>
     af2:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <TMR_u32Timer0Preload+0x1>
     af6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <TMR_u32Timer0Preload+0x2>
     afa:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <TMR_u32Timer0Preload+0x3>
     afe:	62 bf       	out	0x32, r22	; 50
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	08 95       	ret

00000b12 <TMR_VidSetTIMER1OVFTime>:
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	6b 01       	movw	r12, r22
     b24:	7c 01       	movw	r14, r24
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e8       	ldi	r20, 0x80	; 128
     b2c:	5f e3       	ldi	r21, 0x3F	; 63
     b2e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     b32:	81 11       	cpse	r24, r1
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <TMR_VidSetTIMER1OVFTime+0x52>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <TMR_u32ReqTimer1Cntr>
     b42:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
     b46:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
     b4a:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
     b4e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <TMR_u32Timer1Preload>
     b52:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
     b56:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <TMR_u32Timer1Preload+0x2>
     b5a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <TMR_u32Timer1Preload+0x3>
     b5e:	1d bc       	out	0x2d, r1	; 45
     b60:	1c bc       	out	0x2c, r1	; 44
     b62:	99 c0       	rjmp	.+306    	; 0xc96 <TMR_VidSetTIMER1OVFTime+0x184>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	0e 94 af 0b 	call	0x175e	; 0x175e <__gesf2>
     b74:	18 16       	cp	r1, r24
     b76:	0c f0       	brlt	.+2      	; 0xb7a <TMR_VidSetTIMER1OVFTime+0x68>
     b78:	58 c0       	rjmp	.+176    	; 0xc2a <TMR_VidSetTIMER1OVFTime+0x118>
     b7a:	c7 01       	movw	r24, r14
     b7c:	b6 01       	movw	r22, r12
     b7e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
     b86:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
     b92:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     b96:	6b 01       	movw	r12, r22
     b98:	7c 01       	movw	r14, r24
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	a9 01       	movw	r20, r18
     ba0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     ba4:	81 11       	cpse	r24, r1
     ba6:	13 c0       	rjmp	.+38     	; 0xbce <TMR_VidSetTIMER1OVFTime+0xbc>
     ba8:	80 92 99 00 	sts	0x0099, r8	; 0x800099 <TMR_u32ReqTimer1Cntr>
     bac:	90 92 9a 00 	sts	0x009A, r9	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
     bb0:	a0 92 9b 00 	sts	0x009B, r10	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
     bb4:	b0 92 9c 00 	sts	0x009C, r11	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
     bb8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <TMR_u32Timer1Preload>
     bbc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
     bc0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <TMR_u32Timer1Preload+0x2>
     bc4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <TMR_u32Timer1Preload+0x3>
     bc8:	1d bc       	out	0x2d, r1	; 45
     bca:	1c bc       	out	0x2c, r1	; 44
     bcc:	64 c0       	rjmp	.+200    	; 0xc96 <TMR_VidSetTIMER1OVFTime+0x184>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	57 e4       	ldi	r21, 0x47	; 71
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	97 e4       	ldi	r25, 0x47	; 71
     bea:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     bee:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	82 1a       	sub	r8, r18
     bf6:	92 0a       	sbc	r9, r18
     bf8:	a2 0a       	sbc	r10, r18
     bfa:	b2 0a       	sbc	r11, r18
     bfc:	80 92 99 00 	sts	0x0099, r8	; 0x800099 <TMR_u32ReqTimer1Cntr>
     c00:	90 92 9a 00 	sts	0x009A, r9	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
     c04:	a0 92 9b 00 	sts	0x009B, r10	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
     c08:	b0 92 9c 00 	sts	0x009C, r11	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
     c0c:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <TMR_u32Timer1Preload>
     c10:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
     c14:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <TMR_u32Timer1Preload+0x2>
     c18:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <TMR_u32Timer1Preload+0x3>
     c1c:	c7 2e       	mov	r12, r23
     c1e:	d8 2e       	mov	r13, r24
     c20:	e9 2e       	mov	r14, r25
     c22:	ff 24       	eor	r15, r15
     c24:	cd bc       	out	0x2d, r12	; 45
     c26:	6c bd       	out	0x2c, r22	; 44
     c28:	36 c0       	rjmp	.+108    	; 0xc96 <TMR_VidSetTIMER1OVFTime+0x184>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e8       	ldi	r20, 0x80	; 128
     c30:	5f e3       	ldi	r21, 0x3F	; 63
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	64 f5       	brge	.+88     	; 0xc96 <TMR_VidSetTIMER1OVFTime+0x184>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e8       	ldi	r20, 0x80	; 128
     c44:	57 e4       	ldi	r21, 0x47	; 71
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     c4e:	9b 01       	movw	r18, r22
     c50:	ac 01       	movw	r20, r24
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e8       	ldi	r24, 0x80	; 128
     c58:	97 e4       	ldi	r25, 0x47	; 71
     c5a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     c5e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     c62:	c1 2c       	mov	r12, r1
     c64:	d1 2c       	mov	r13, r1
     c66:	76 01       	movw	r14, r12
     c68:	c3 94       	inc	r12
     c6a:	c0 92 99 00 	sts	0x0099, r12	; 0x800099 <TMR_u32ReqTimer1Cntr>
     c6e:	d0 92 9a 00 	sts	0x009A, r13	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
     c72:	e0 92 9b 00 	sts	0x009B, r14	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
     c76:	f0 92 9c 00 	sts	0x009C, r15	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
     c7a:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <TMR_u32Timer1Preload>
     c7e:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
     c82:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <TMR_u32Timer1Preload+0x2>
     c86:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <TMR_u32Timer1Preload+0x3>
     c8a:	c7 2e       	mov	r12, r23
     c8c:	d8 2e       	mov	r13, r24
     c8e:	e9 2e       	mov	r14, r25
     c90:	ff 24       	eor	r15, r15
     c92:	cd bc       	out	0x2d, r12	; 45
     c94:	6c bd       	out	0x2c, r22	; 44
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	08 95       	ret

00000ca8 <TMR_VidSetTIMER2OVFTime>:
     ca8:	8f 92       	push	r8
     caa:	9f 92       	push	r9
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	6b 01       	movw	r12, r22
     cba:	7c 01       	movw	r14, r24
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     cc8:	81 11       	cpse	r24, r1
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <TMR_VidSetTIMER2OVFTime+0x50>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <TMR_u32ReqTimer2Cntr>
     cd8:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
     cdc:	a0 93 97 00 	sts	0x0097, r26	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
     ce0:	b0 93 98 00 	sts	0x0098, r27	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
     ce4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <TMR_u32Timer2Preload>
     ce8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TMR_u32Timer2Preload+0x1>
     cec:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <TMR_u32Timer2Preload+0x2>
     cf0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <TMR_u32Timer2Preload+0x3>
     cf4:	14 bc       	out	0x24, r1	; 36
     cf6:	8e c0       	rjmp	.+284    	; 0xe14 <TMR_VidSetTIMER2OVFTime+0x16c>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e8       	ldi	r20, 0x80	; 128
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	c7 01       	movw	r24, r14
     d02:	b6 01       	movw	r22, r12
     d04:	0e 94 af 0b 	call	0x175e	; 0x175e <__gesf2>
     d08:	18 16       	cp	r1, r24
     d0a:	0c f0       	brlt	.+2      	; 0xd0e <TMR_VidSetTIMER2OVFTime+0x66>
     d0c:	52 c0       	rjmp	.+164    	; 0xdb2 <TMR_VidSetTIMER2OVFTime+0x10a>
     d0e:	c7 01       	movw	r24, r14
     d10:	b6 01       	movw	r22, r12
     d12:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     d16:	4b 01       	movw	r8, r22
     d18:	5c 01       	movw	r10, r24
     d1a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     d2a:	6b 01       	movw	r12, r22
     d2c:	7c 01       	movw	r14, r24
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	a9 01       	movw	r20, r18
     d34:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     d38:	81 11       	cpse	r24, r1
     d3a:	12 c0       	rjmp	.+36     	; 0xd60 <TMR_VidSetTIMER2OVFTime+0xb8>
     d3c:	80 92 95 00 	sts	0x0095, r8	; 0x800095 <TMR_u32ReqTimer2Cntr>
     d40:	90 92 96 00 	sts	0x0096, r9	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
     d44:	a0 92 97 00 	sts	0x0097, r10	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
     d48:	b0 92 98 00 	sts	0x0098, r11	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
     d4c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <TMR_u32Timer2Preload>
     d50:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TMR_u32Timer2Preload+0x1>
     d54:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <TMR_u32Timer2Preload+0x2>
     d58:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <TMR_u32Timer2Preload+0x3>
     d5c:	14 bc       	out	0x24, r1	; 36
     d5e:	5a c0       	rjmp	.+180    	; 0xe14 <TMR_VidSetTIMER2OVFTime+0x16c>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	53 e4       	ldi	r21, 0x43	; 67
     d68:	c7 01       	movw	r24, r14
     d6a:	b6 01       	movw	r22, r12
     d6c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	93 e4       	ldi	r25, 0x43	; 67
     d7c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     d80:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	82 1a       	sub	r8, r18
     d88:	92 0a       	sbc	r9, r18
     d8a:	a2 0a       	sbc	r10, r18
     d8c:	b2 0a       	sbc	r11, r18
     d8e:	80 92 95 00 	sts	0x0095, r8	; 0x800095 <TMR_u32ReqTimer2Cntr>
     d92:	90 92 96 00 	sts	0x0096, r9	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
     d96:	a0 92 97 00 	sts	0x0097, r10	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
     d9a:	b0 92 98 00 	sts	0x0098, r11	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
     d9e:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <TMR_u32Timer2Preload>
     da2:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <TMR_u32Timer2Preload+0x1>
     da6:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <TMR_u32Timer2Preload+0x2>
     daa:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <TMR_u32Timer2Preload+0x3>
     dae:	64 bd       	out	0x24, r22	; 36
     db0:	31 c0       	rjmp	.+98     	; 0xe14 <TMR_VidSetTIMER2OVFTime+0x16c>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e8       	ldi	r20, 0x80	; 128
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__cmpsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	3c f5       	brge	.+78     	; 0xe14 <TMR_VidSetTIMER2OVFTime+0x16c>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e8       	ldi	r24, 0x80	; 128
     de0:	93 e4       	ldi	r25, 0x43	; 67
     de2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__subsf3>
     de6:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fixunssfsi>
     dea:	c1 2c       	mov	r12, r1
     dec:	d1 2c       	mov	r13, r1
     dee:	76 01       	movw	r14, r12
     df0:	c3 94       	inc	r12
     df2:	c0 92 95 00 	sts	0x0095, r12	; 0x800095 <TMR_u32ReqTimer2Cntr>
     df6:	d0 92 96 00 	sts	0x0096, r13	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
     dfa:	e0 92 97 00 	sts	0x0097, r14	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
     dfe:	f0 92 98 00 	sts	0x0098, r15	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
     e02:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <TMR_u32Timer2Preload>
     e06:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <TMR_u32Timer2Preload+0x1>
     e0a:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <TMR_u32Timer2Preload+0x2>
     e0e:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <TMR_u32Timer2Preload+0x3>
     e12:	64 bd       	out	0x24, r22	; 36
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	08 95       	ret

00000e26 <TMR_VidInit>:
     e26:	83 b7       	in	r24, 0x33	; 51
     e28:	8f 7b       	andi	r24, 0xBF	; 191
     e2a:	83 bf       	out	0x33, r24	; 51
     e2c:	83 b7       	in	r24, 0x33	; 51
     e2e:	87 7f       	andi	r24, 0xF7	; 247
     e30:	83 bf       	out	0x33, r24	; 51
     e32:	89 b7       	in	r24, 0x39	; 57
     e34:	81 60       	ori	r24, 0x01	; 1
     e36:	89 bf       	out	0x39, r24	; 57
     e38:	83 b7       	in	r24, 0x33	; 51
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
     e3c:	83 bf       	out	0x33, r24	; 51
     e3e:	83 b7       	in	r24, 0x33	; 51
     e40:	8f 7d       	andi	r24, 0xDF	; 223
     e42:	83 bf       	out	0x33, r24	; 51
     e44:	83 b7       	in	r24, 0x33	; 51
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	83 bf       	out	0x33, r24	; 51
     e4a:	83 b7       	in	r24, 0x33	; 51
     e4c:	8d 7f       	andi	r24, 0xFD	; 253
     e4e:	83 bf       	out	0x33, r24	; 51
     e50:	83 b7       	in	r24, 0x33	; 51
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	83 bf       	out	0x33, r24	; 51
     e56:	83 b7       	in	r24, 0x33	; 51
     e58:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <TMR_u8Timer0CtrlRegValue>
     e5c:	8e b5       	in	r24, 0x2e	; 46
     e5e:	8e 7f       	andi	r24, 0xFE	; 254
     e60:	8e bd       	out	0x2e, r24	; 46
     e62:	8e b5       	in	r24, 0x2e	; 46
     e64:	8d 7f       	andi	r24, 0xFD	; 253
     e66:	8e bd       	out	0x2e, r24	; 46
     e68:	8e b5       	in	r24, 0x2e	; 46
     e6a:	8b 7f       	andi	r24, 0xFB	; 251
     e6c:	8e bd       	out	0x2e, r24	; 46
     e6e:	85 b5       	in	r24, 0x25	; 37
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	85 bd       	out	0x25, r24	; 37
     e74:	85 b5       	in	r24, 0x25	; 37
     e76:	8d 7f       	andi	r24, 0xFD	; 253
     e78:	85 bd       	out	0x25, r24	; 37
     e7a:	85 b5       	in	r24, 0x25	; 37
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	85 bd       	out	0x25, r24	; 37
     e80:	08 95       	ret

00000e82 <TMR_u8SetDesiredTime>:
     e82:	28 2f       	mov	r18, r24
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	08 f0       	brcs	.+2      	; 0xe8a <TMR_u8SetDesiredTime+0x8>
     e88:	44 c0       	rjmp	.+136    	; 0xf12 <TMR_u8SetDesiredTime+0x90>
     e8a:	cb 01       	movw	r24, r22
     e8c:	ba 01       	movw	r22, r20
     e8e:	21 30       	cpi	r18, 0x01	; 1
     e90:	c1 f0       	breq	.+48     	; 0xec2 <TMR_u8SetDesiredTime+0x40>
     e92:	18 f0       	brcs	.+6      	; 0xe9a <TMR_u8SetDesiredTime+0x18>
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	49 f1       	breq	.+82     	; 0xeea <TMR_u8SetDesiredTime+0x68>
     e98:	3e c0       	rjmp	.+124    	; 0xf16 <TMR_u8SetDesiredTime+0x94>
     e9a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer0Cntr>
     e9e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
     ea2:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
     ea6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
     eaa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	59 e3       	ldi	r21, 0x39	; 57
     eb6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     eba:	0e 94 ca 04 	call	0x994	; 0x994 <TMR_VidSetTIMER0OVFTime>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	08 95       	ret
     ec2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer1Cntr>
     ec6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
     eca:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
     ece:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
     ed2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	54 e3       	ldi	r21, 0x34	; 52
     ede:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     ee2:	0e 94 89 05 	call	0xb12	; 0xb12 <TMR_VidSetTIMER1OVFTime>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
     eea:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <TMR_u32Timer2Cntr>
     eee:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
     ef2:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x2>
     ef6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
     efa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__floatunsisf>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e8       	ldi	r20, 0x80	; 128
     f04:	5b e3       	ldi	r21, 0x3B	; 59
     f06:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__mulsf3>
     f0a:	0e 94 54 06 	call	0xca8	; 0xca8 <TMR_VidSetTIMER2OVFTime>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	08 95       	ret
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	08 95       	ret

00000f1a <TMR_u8SetCallBack>:
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	b0 f4       	brcc	.+44     	; 0xf4a <TMR_u8SetCallBack+0x30>
     f1e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <TMR_u32Timer0Preload>
     f22:	92 bf       	out	0x32, r25	; 50
     f24:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <TMR_u32Timer1Preload>
     f28:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
     f2c:	3d bd       	out	0x2d, r19	; 45
     f2e:	2c bd       	out	0x2c, r18	; 44
     f30:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <TMR_u32Timer2Preload>
     f34:	94 bd       	out	0x24, r25	; 36
     f36:	e8 2f       	mov	r30, r24
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e7 57       	subi	r30, 0x77	; 119
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	71 83       	std	Z+1, r23	; 0x01
     f44:	60 83       	st	Z, r22
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	08 95       	ret
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	08 95       	ret

00000f4e <__vector_6>:

/* ISR of Input Capture interrupts */
void __vector_6(void)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
    static u8 Local_u8Flag = 0;
    static u16 Local_u16StartTime = 0;
    static u16 Local_u16StopTime = 0;

    if (Local_u8Flag == 0)
     f6c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Local_u8Flag.1764>
     f70:	81 11       	cpse	r24, r1
     f72:	2f c0       	rjmp	.+94     	; 0xfd2 <__vector_6+0x84>
    {
        Local_u8Flag = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Local_u8Flag.1764>
        TMR_u16TotalTime = ICR1 - Local_u16StartTime;
     f7a:	66 b5       	in	r22, 0x26	; 38
     f7c:	77 b5       	in	r23, 0x27	; 39
     f7e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <Local_u16StartTime.1765>
     f82:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <Local_u16StartTime.1765+0x1>
     f86:	68 1b       	sub	r22, r24
     f88:	79 0b       	sbc	r23, r25
     f8a:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <TMR_u16TotalTime+0x1>
     f8e:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <TMR_u16TotalTime>
        TMR_u16ONTime = Local_u16StopTime - Local_u16StartTime;
     f92:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <Local_u16StopTime.1766>
     f96:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <Local_u16StopTime.1766+0x1>
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <TMR_u16ONTime+0x1>
     fa2:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <TMR_u16ONTime>
        Local_u16StartTime = ICR1;
     fa6:	86 b5       	in	r24, 0x26	; 38
     fa8:	97 b5       	in	r25, 0x27	; 39
     faa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Local_u16StartTime.1765+0x1>
     fae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Local_u16StartTime.1765>
        TMR_u16DutyCycle = ((TMR_u16ONTime * 100) / TMR_u16TotalTime);
     fb2:	44 e6       	ldi	r20, 0x64	; 100
     fb4:	42 9f       	mul	r20, r18
     fb6:	c0 01       	movw	r24, r0
     fb8:	43 9f       	mul	r20, r19
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodhi4>
     fc2:	70 93 90 00 	sts	0x0090, r23	; 0x800090 <TMR_u16DutyCycle+0x1>
     fc6:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <TMR_u16DutyCycle>
        CLR_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Falling Edge */
     fca:	8e b5       	in	r24, 0x2e	; 46
     fcc:	8f 7b       	andi	r24, 0xBF	; 191
     fce:	8e bd       	out	0x2e, r24	; 46
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <__vector_6+0x9a>
    }
    else
    {
        Local_u8Flag = 0;
     fd2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Local_u8Flag.1764>
        Local_u16StopTime = ICR1;
     fd6:	86 b5       	in	r24, 0x26	; 38
     fd8:	97 b5       	in	r25, 0x27	; 39
     fda:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Local_u16StopTime.1766+0x1>
     fde:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Local_u16StopTime.1766>
        SET_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Raising Edge */
     fe2:	8e b5       	in	r24, 0x2e	; 46
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	8e bd       	out	0x2e, r24	; 46
    }
}
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_11>:

/*========================== ISRs of Overflow timer interrupts ==========================*/

/* The ISR of Timer/Counter0 Overflow interrupt */
void __vector_11(void)
{
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER0] != NULL)
    1028:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <PVCallBack>
    102c:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <PVCallBack+0x1>
    1030:	89 2b       	or	r24, r25
    1032:	81 f1       	breq	.+96     	; 0x1094 <__vector_11+0x8e>
    {
        TMR_u32Timer0Cntr++;
    1034:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <TMR_u32Timer0Cntr>
    1038:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    103c:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    1040:	b0 91 b8 00 	lds	r27, 0x00B8	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	a1 1d       	adc	r26, r1
    1048:	b1 1d       	adc	r27, r1
    104a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <TMR_u32Timer0Cntr>
    104e:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    1052:	a0 93 b7 00 	sts	0x00B7, r26	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    1056:	b0 93 b8 00 	sts	0x00B8, r27	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
        if (TMR_u32Timer0Cntr == TMR_u32ReqTimer0Cntr)
    105a:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <TMR_u32ReqTimer0Cntr>
    105e:	50 91 9e 00 	lds	r21, 0x009E	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
    1062:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
    1066:	70 91 a0 00 	lds	r23, 0x00A0	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
    106a:	84 17       	cp	r24, r20
    106c:	95 07       	cpc	r25, r21
    106e:	a6 07       	cpc	r26, r22
    1070:	b7 07       	cpc	r27, r23
    1072:	81 f4       	brne	.+32     	; 0x1094 <__vector_11+0x8e>
        {
            TMR_u32Timer0Cntr = 0;
    1074:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer0Cntr>
    1078:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    107c:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    1080:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
            TCNT0 = TMR_u32Timer0Preload;
    1084:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <TMR_u32Timer0Preload>
    1088:	82 bf       	out	0x32, r24	; 50
            PVCallBack[TMR_TIMER0](); /* The ISR action */
    108a:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <PVCallBack>
    108e:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <PVCallBack+0x1>
    1092:	09 95       	icall
        }
    }
}
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_9>:

/* The ISR of Timer/Counter1 Overflow interrupt */
void __vector_9(void)
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    10d8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <PVCallBack+0x2>
    10dc:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <PVCallBack+0x3>
    10e0:	89 2b       	or	r24, r25
    10e2:	e9 f1       	breq	.+122    	; 0x115e <__vector_9+0xa8>
    {
        TMR_u32Timer1Cntr++;
    10e4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TMR_u32Timer1Cntr>
    10e8:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    10ec:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    10f0:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	a1 1d       	adc	r26, r1
    10f8:	b1 1d       	adc	r27, r1
    10fa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TMR_u32Timer1Cntr>
    10fe:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    1102:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    1106:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    110a:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <TMR_u32ReqTimer1Cntr>
    110e:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
    1112:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
    1116:	70 91 9c 00 	lds	r23, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
    111a:	84 17       	cp	r24, r20
    111c:	95 07       	cpc	r25, r21
    111e:	a6 07       	cpc	r26, r22
    1120:	b7 07       	cpc	r27, r23
    1122:	e9 f4       	brne	.+58     	; 0x115e <__vector_9+0xa8>
        {
            TMR_u32Timer1Cntr = 0;
    1124:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer1Cntr>
    1128:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    112c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    1130:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
            TCNT1H = TMR_u32Timer1Preload >> 8;
    1134:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <TMR_u32Timer1Preload>
    1138:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <TMR_u32Timer1Preload+0x1>
    113c:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <TMR_u32Timer1Preload+0x2>
    1140:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <TMR_u32Timer1Preload+0x3>
    1144:	89 2f       	mov	r24, r25
    1146:	9a 2f       	mov	r25, r26
    1148:	ab 2f       	mov	r26, r27
    114a:	bb 27       	eor	r27, r27
    114c:	8d bd       	out	0x2d, r24	; 45
            TCNT1L = TMR_u32Timer1Preload;
    114e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <TMR_u32Timer1Preload>
    1152:	8c bd       	out	0x2c, r24	; 44
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    1154:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <PVCallBack+0x2>
    1158:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <PVCallBack+0x3>
    115c:	09 95       	icall
        }
    }
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_5>:

/* The ISR of Timer/Counter2 Overflow interrupt */
void __vector_5(void)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER2] != NULL)
    11a2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <PVCallBack+0x4>
    11a6:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <PVCallBack+0x5>
    11aa:	89 2b       	or	r24, r25
    11ac:	81 f1       	breq	.+96     	; 0x120e <__vector_5+0x8e>
    {
        TMR_u32Timer2Cntr++;
    11ae:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <TMR_u32Timer2Cntr>
    11b2:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    11b6:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    11ba:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	a1 1d       	adc	r26, r1
    11c2:	b1 1d       	adc	r27, r1
    11c4:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <TMR_u32Timer2Cntr>
    11c8:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    11cc:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    11d0:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
        if (TMR_u32Timer2Cntr == TMR_u32ReqTimer2Cntr)
    11d4:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <TMR_u32ReqTimer2Cntr>
    11d8:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
    11dc:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
    11e0:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
    11e4:	84 17       	cp	r24, r20
    11e6:	95 07       	cpc	r25, r21
    11e8:	a6 07       	cpc	r26, r22
    11ea:	b7 07       	cpc	r27, r23
    11ec:	81 f4       	brne	.+32     	; 0x120e <__vector_5+0x8e>
        {
            TMR_u32Timer2Cntr = 0;
    11ee:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <TMR_u32Timer2Cntr>
    11f2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    11f6:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    11fa:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
            TCNT2 = TMR_u32Timer2Preload;
    11fe:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <TMR_u32Timer2Preload>
    1202:	84 bd       	out	0x24, r24	; 36
            PVCallBack[TMR_TIMER2](); /* The ISR action */
    1204:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <PVCallBack+0x4>
    1208:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <PVCallBack+0x5>
    120c:	09 95       	icall
        }
    }
}
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_10>:

/*========================== ISRs of Compare Match timer interrupts ==========================*/

/* The ISR of Timer/Counter0 Compare Match interrupt */
void __vector_10(void)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER0] != NULL)
    1252:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <PVCallBack>
    1256:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <PVCallBack+0x1>
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	49 f1       	breq	.+82     	; 0x12b0 <__vector_10+0x80>
    {
        TMR_u32Timer0Cntr++;
    125e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <TMR_u32Timer0Cntr>
    1262:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    1266:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    126a:	b0 91 b8 00 	lds	r27, 0x00B8	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	a1 1d       	adc	r26, r1
    1272:	b1 1d       	adc	r27, r1
    1274:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <TMR_u32Timer0Cntr>
    1278:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    127c:	a0 93 b7 00 	sts	0x00B7, r26	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    1280:	b0 93 b8 00 	sts	0x00B8, r27	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
        if (TMR_u32Timer0Cntr == TMR_u32ReqTimer0Cntr)
    1284:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <TMR_u32ReqTimer0Cntr>
    1288:	50 91 9e 00 	lds	r21, 0x009E	; 0x80009e <TMR_u32ReqTimer0Cntr+0x1>
    128c:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <TMR_u32ReqTimer0Cntr+0x2>
    1290:	70 91 a0 00 	lds	r23, 0x00A0	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x3>
    1294:	84 17       	cp	r24, r20
    1296:	95 07       	cpc	r25, r21
    1298:	a6 07       	cpc	r26, r22
    129a:	b7 07       	cpc	r27, r23
    129c:	49 f4       	brne	.+18     	; 0x12b0 <__vector_10+0x80>
        {
            TMR_u32Timer0Cntr = 0;
    129e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer0Cntr>
    12a2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr+0x1>
    12a6:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x2>
    12aa:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x3>
            PVCallBack[TMR_TIMER0](); /* The ISR action */
    12ae:	09 95       	icall
        }
    }
}
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_7>:

/* The ISR of Timer/Counter1 Compare Match A interrupt */
void __vector_7(void)
{
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    12f4:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <PVCallBack+0x2>
    12f8:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <PVCallBack+0x3>
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	49 f1       	breq	.+82     	; 0x1352 <__vector_7+0x80>
    {
        TMR_u32Timer1Cntr++;
    1300:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TMR_u32Timer1Cntr>
    1304:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    1308:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    130c:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	a1 1d       	adc	r26, r1
    1314:	b1 1d       	adc	r27, r1
    1316:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TMR_u32Timer1Cntr>
    131a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    131e:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    1322:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    1326:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <TMR_u32ReqTimer1Cntr>
    132a:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
    132e:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
    1332:	70 91 9c 00 	lds	r23, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
    1336:	84 17       	cp	r24, r20
    1338:	95 07       	cpc	r25, r21
    133a:	a6 07       	cpc	r26, r22
    133c:	b7 07       	cpc	r27, r23
    133e:	49 f4       	brne	.+18     	; 0x1352 <__vector_7+0x80>
        {
            TMR_u32Timer1Cntr = 0;
    1340:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer1Cntr>
    1344:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    1348:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    134c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    1350:	09 95       	icall
        }
    }
}
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_8>:

/* The ISR of Timer/Counter1 Compare Match B interrupt */
void __vector_8(void)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    1396:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <PVCallBack+0x2>
    139a:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <PVCallBack+0x3>
    139e:	30 97       	sbiw	r30, 0x00	; 0
    13a0:	49 f1       	breq	.+82     	; 0x13f4 <__vector_8+0x80>
    {
        TMR_u32Timer1Cntr++;
    13a2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TMR_u32Timer1Cntr>
    13a6:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    13aa:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    13ae:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	a1 1d       	adc	r26, r1
    13b6:	b1 1d       	adc	r27, r1
    13b8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TMR_u32Timer1Cntr>
    13bc:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    13c0:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    13c4:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    13c8:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <TMR_u32ReqTimer1Cntr>
    13cc:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr+0x1>
    13d0:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x2>
    13d4:	70 91 9c 00 	lds	r23, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x3>
    13d8:	84 17       	cp	r24, r20
    13da:	95 07       	cpc	r25, r21
    13dc:	a6 07       	cpc	r26, r22
    13de:	b7 07       	cpc	r27, r23
    13e0:	49 f4       	brne	.+18     	; 0x13f4 <__vector_8+0x80>
        {
            TMR_u32Timer1Cntr = 0;
    13e2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer1Cntr>
    13e6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr+0x1>
    13ea:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x2>
    13ee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x3>
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    13f2:	09 95       	icall
        }
    }
}
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_4>:

/* The ISR of Timer/Counter2 Compare Match interrupt */
void __vector_4(void)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER2] != NULL)
    1438:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <PVCallBack+0x4>
    143c:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <PVCallBack+0x5>
    1440:	30 97       	sbiw	r30, 0x00	; 0
    1442:	49 f1       	breq	.+82     	; 0x1496 <__vector_4+0x80>
    {
        TMR_u32Timer2Cntr++;
    1444:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <TMR_u32Timer2Cntr>
    1448:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    144c:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    1450:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	a1 1d       	adc	r26, r1
    1458:	b1 1d       	adc	r27, r1
    145a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <TMR_u32Timer2Cntr>
    145e:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    1462:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    1466:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
        if (TMR_u32Timer2Cntr == TMR_u32ReqTimer2Cntr)
    146a:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <TMR_u32ReqTimer2Cntr>
    146e:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <TMR_u32ReqTimer2Cntr+0x1>
    1472:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <TMR_u32ReqTimer2Cntr+0x2>
    1476:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <TMR_u32ReqTimer2Cntr+0x3>
    147a:	84 17       	cp	r24, r20
    147c:	95 07       	cpc	r25, r21
    147e:	a6 07       	cpc	r26, r22
    1480:	b7 07       	cpc	r27, r23
    1482:	49 f4       	brne	.+18     	; 0x1496 <__vector_4+0x80>
        {
            TMR_u32Timer2Cntr = 0;
    1484:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <TMR_u32Timer2Cntr>
    1488:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr+0x1>
    148c:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x2>
    1490:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x3>
            PVCallBack[TMR_TIMER2](); /* The ISR action */
    1494:	09 95       	icall
        }
    }
}
    1496:	ff 91       	pop	r31
    1498:	ef 91       	pop	r30
    149a:	bf 91       	pop	r27
    149c:	af 91       	pop	r26
    149e:	9f 91       	pop	r25
    14a0:	8f 91       	pop	r24
    14a2:	7f 91       	pop	r23
    14a4:	6f 91       	pop	r22
    14a6:	5f 91       	pop	r21
    14a8:	4f 91       	pop	r20
    14aa:	3f 91       	pop	r19
    14ac:	2f 91       	pop	r18
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <__subsf3>:
    14b8:	50 58       	subi	r21, 0x80	; 128

000014ba <__addsf3>:
    14ba:	bb 27       	eor	r27, r27
    14bc:	aa 27       	eor	r26, r26
    14be:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__addsf3x>
    14c2:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_round>
    14c6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_pscA>
    14ca:	38 f0       	brcs	.+14     	; 0x14da <__addsf3+0x20>
    14cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_pscB>
    14d0:	20 f0       	brcs	.+8      	; 0x14da <__addsf3+0x20>
    14d2:	39 f4       	brne	.+14     	; 0x14e2 <__addsf3+0x28>
    14d4:	9f 3f       	cpi	r25, 0xFF	; 255
    14d6:	19 f4       	brne	.+6      	; 0x14de <__addsf3+0x24>
    14d8:	26 f4       	brtc	.+8      	; 0x14e2 <__addsf3+0x28>
    14da:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_nan>
    14de:	0e f4       	brtc	.+2      	; 0x14e2 <__addsf3+0x28>
    14e0:	e0 95       	com	r30
    14e2:	e7 fb       	bst	r30, 7
    14e4:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_inf>

000014e8 <__addsf3x>:
    14e8:	e9 2f       	mov	r30, r25
    14ea:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_split3>
    14ee:	58 f3       	brcs	.-42     	; 0x14c6 <__addsf3+0xc>
    14f0:	ba 17       	cp	r27, r26
    14f2:	62 07       	cpc	r22, r18
    14f4:	73 07       	cpc	r23, r19
    14f6:	84 07       	cpc	r24, r20
    14f8:	95 07       	cpc	r25, r21
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <__addsf3x+0x1c>
    14fc:	79 f4       	brne	.+30     	; 0x151c <__addsf3x+0x34>
    14fe:	a6 f5       	brtc	.+104    	; 0x1568 <__addsf3x+0x80>
    1500:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_zero>
    1504:	0e f4       	brtc	.+2      	; 0x1508 <__addsf3x+0x20>
    1506:	e0 95       	com	r30
    1508:	0b 2e       	mov	r0, r27
    150a:	ba 2f       	mov	r27, r26
    150c:	a0 2d       	mov	r26, r0
    150e:	0b 01       	movw	r0, r22
    1510:	b9 01       	movw	r22, r18
    1512:	90 01       	movw	r18, r0
    1514:	0c 01       	movw	r0, r24
    1516:	ca 01       	movw	r24, r20
    1518:	a0 01       	movw	r20, r0
    151a:	11 24       	eor	r1, r1
    151c:	ff 27       	eor	r31, r31
    151e:	59 1b       	sub	r21, r25
    1520:	99 f0       	breq	.+38     	; 0x1548 <__addsf3x+0x60>
    1522:	59 3f       	cpi	r21, 0xF9	; 249
    1524:	50 f4       	brcc	.+20     	; 0x153a <__addsf3x+0x52>
    1526:	50 3e       	cpi	r21, 0xE0	; 224
    1528:	68 f1       	brcs	.+90     	; 0x1584 <__addsf3x+0x9c>
    152a:	1a 16       	cp	r1, r26
    152c:	f0 40       	sbci	r31, 0x00	; 0
    152e:	a2 2f       	mov	r26, r18
    1530:	23 2f       	mov	r18, r19
    1532:	34 2f       	mov	r19, r20
    1534:	44 27       	eor	r20, r20
    1536:	58 5f       	subi	r21, 0xF8	; 248
    1538:	f3 cf       	rjmp	.-26     	; 0x1520 <__addsf3x+0x38>
    153a:	46 95       	lsr	r20
    153c:	37 95       	ror	r19
    153e:	27 95       	ror	r18
    1540:	a7 95       	ror	r26
    1542:	f0 40       	sbci	r31, 0x00	; 0
    1544:	53 95       	inc	r21
    1546:	c9 f7       	brne	.-14     	; 0x153a <__addsf3x+0x52>
    1548:	7e f4       	brtc	.+30     	; 0x1568 <__addsf3x+0x80>
    154a:	1f 16       	cp	r1, r31
    154c:	ba 0b       	sbc	r27, r26
    154e:	62 0b       	sbc	r22, r18
    1550:	73 0b       	sbc	r23, r19
    1552:	84 0b       	sbc	r24, r20
    1554:	ba f0       	brmi	.+46     	; 0x1584 <__addsf3x+0x9c>
    1556:	91 50       	subi	r25, 0x01	; 1
    1558:	a1 f0       	breq	.+40     	; 0x1582 <__addsf3x+0x9a>
    155a:	ff 0f       	add	r31, r31
    155c:	bb 1f       	adc	r27, r27
    155e:	66 1f       	adc	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	c2 f7       	brpl	.-16     	; 0x1556 <__addsf3x+0x6e>
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <__addsf3x+0x9c>
    1568:	ba 0f       	add	r27, r26
    156a:	62 1f       	adc	r22, r18
    156c:	73 1f       	adc	r23, r19
    156e:	84 1f       	adc	r24, r20
    1570:	48 f4       	brcc	.+18     	; 0x1584 <__addsf3x+0x9c>
    1572:	87 95       	ror	r24
    1574:	77 95       	ror	r23
    1576:	67 95       	ror	r22
    1578:	b7 95       	ror	r27
    157a:	f7 95       	ror	r31
    157c:	9e 3f       	cpi	r25, 0xFE	; 254
    157e:	08 f0       	brcs	.+2      	; 0x1582 <__addsf3x+0x9a>
    1580:	b0 cf       	rjmp	.-160    	; 0x14e2 <__addsf3+0x28>
    1582:	93 95       	inc	r25
    1584:	88 0f       	add	r24, r24
    1586:	08 f0       	brcs	.+2      	; 0x158a <__addsf3x+0xa2>
    1588:	99 27       	eor	r25, r25
    158a:	ee 0f       	add	r30, r30
    158c:	97 95       	ror	r25
    158e:	87 95       	ror	r24
    1590:	08 95       	ret

00001592 <__cmpsf2>:
    1592:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__fp_cmp>
    1596:	08 f4       	brcc	.+2      	; 0x159a <__cmpsf2+0x8>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	08 95       	ret

0000159c <__fixunssfsi>:
    159c:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_splitA>
    15a0:	88 f0       	brcs	.+34     	; 0x15c4 <__fixunssfsi+0x28>
    15a2:	9f 57       	subi	r25, 0x7F	; 127
    15a4:	98 f0       	brcs	.+38     	; 0x15cc <__fixunssfsi+0x30>
    15a6:	b9 2f       	mov	r27, r25
    15a8:	99 27       	eor	r25, r25
    15aa:	b7 51       	subi	r27, 0x17	; 23
    15ac:	b0 f0       	brcs	.+44     	; 0x15da <__fixunssfsi+0x3e>
    15ae:	e1 f0       	breq	.+56     	; 0x15e8 <__fixunssfsi+0x4c>
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	1a f0       	brmi	.+6      	; 0x15c0 <__fixunssfsi+0x24>
    15ba:	ba 95       	dec	r27
    15bc:	c9 f7       	brne	.-14     	; 0x15b0 <__fixunssfsi+0x14>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <__fixunssfsi+0x4c>
    15c0:	b1 30       	cpi	r27, 0x01	; 1
    15c2:	91 f0       	breq	.+36     	; 0x15e8 <__fixunssfsi+0x4c>
    15c4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_zero>
    15c8:	b1 e0       	ldi	r27, 0x01	; 1
    15ca:	08 95       	ret
    15cc:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_zero>
    15d0:	67 2f       	mov	r22, r23
    15d2:	78 2f       	mov	r23, r24
    15d4:	88 27       	eor	r24, r24
    15d6:	b8 5f       	subi	r27, 0xF8	; 248
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <__fixunssfsi+0x4c>
    15da:	b9 3f       	cpi	r27, 0xF9	; 249
    15dc:	cc f3       	brlt	.-14     	; 0x15d0 <__fixunssfsi+0x34>
    15de:	86 95       	lsr	r24
    15e0:	77 95       	ror	r23
    15e2:	67 95       	ror	r22
    15e4:	b3 95       	inc	r27
    15e6:	d9 f7       	brne	.-10     	; 0x15de <__fixunssfsi+0x42>
    15e8:	3e f4       	brtc	.+14     	; 0x15f8 <__fixunssfsi+0x5c>
    15ea:	90 95       	com	r25
    15ec:	80 95       	com	r24
    15ee:	70 95       	com	r23
    15f0:	61 95       	neg	r22
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	8f 4f       	sbci	r24, 0xFF	; 255
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	08 95       	ret

000015fa <__floatunsisf>:
    15fa:	e8 94       	clt
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <__floatsisf+0x12>

000015fe <__floatsisf>:
    15fe:	97 fb       	bst	r25, 7
    1600:	3e f4       	brtc	.+14     	; 0x1610 <__floatsisf+0x12>
    1602:	90 95       	com	r25
    1604:	80 95       	com	r24
    1606:	70 95       	com	r23
    1608:	61 95       	neg	r22
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	99 23       	and	r25, r25
    1612:	a9 f0       	breq	.+42     	; 0x163e <__floatsisf+0x40>
    1614:	f9 2f       	mov	r31, r25
    1616:	96 e9       	ldi	r25, 0x96	; 150
    1618:	bb 27       	eor	r27, r27
    161a:	93 95       	inc	r25
    161c:	f6 95       	lsr	r31
    161e:	87 95       	ror	r24
    1620:	77 95       	ror	r23
    1622:	67 95       	ror	r22
    1624:	b7 95       	ror	r27
    1626:	f1 11       	cpse	r31, r1
    1628:	f8 cf       	rjmp	.-16     	; 0x161a <__floatsisf+0x1c>
    162a:	fa f4       	brpl	.+62     	; 0x166a <__floatsisf+0x6c>
    162c:	bb 0f       	add	r27, r27
    162e:	11 f4       	brne	.+4      	; 0x1634 <__floatsisf+0x36>
    1630:	60 ff       	sbrs	r22, 0
    1632:	1b c0       	rjmp	.+54     	; 0x166a <__floatsisf+0x6c>
    1634:	6f 5f       	subi	r22, 0xFF	; 255
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	8f 4f       	sbci	r24, 0xFF	; 255
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	16 c0       	rjmp	.+44     	; 0x166a <__floatsisf+0x6c>
    163e:	88 23       	and	r24, r24
    1640:	11 f0       	breq	.+4      	; 0x1646 <__floatsisf+0x48>
    1642:	96 e9       	ldi	r25, 0x96	; 150
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <__floatsisf+0x6a>
    1646:	77 23       	and	r23, r23
    1648:	21 f0       	breq	.+8      	; 0x1652 <__floatsisf+0x54>
    164a:	9e e8       	ldi	r25, 0x8E	; 142
    164c:	87 2f       	mov	r24, r23
    164e:	76 2f       	mov	r23, r22
    1650:	05 c0       	rjmp	.+10     	; 0x165c <__floatsisf+0x5e>
    1652:	66 23       	and	r22, r22
    1654:	71 f0       	breq	.+28     	; 0x1672 <__floatsisf+0x74>
    1656:	96 e8       	ldi	r25, 0x86	; 134
    1658:	86 2f       	mov	r24, r22
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	2a f0       	brmi	.+10     	; 0x166a <__floatsisf+0x6c>
    1660:	9a 95       	dec	r25
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	88 1f       	adc	r24, r24
    1668:	da f7       	brpl	.-10     	; 0x1660 <__floatsisf+0x62>
    166a:	88 0f       	add	r24, r24
    166c:	96 95       	lsr	r25
    166e:	87 95       	ror	r24
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <__fp_cmp>:
    1674:	99 0f       	add	r25, r25
    1676:	00 08       	sbc	r0, r0
    1678:	55 0f       	add	r21, r21
    167a:	aa 0b       	sbc	r26, r26
    167c:	e0 e8       	ldi	r30, 0x80	; 128
    167e:	fe ef       	ldi	r31, 0xFE	; 254
    1680:	16 16       	cp	r1, r22
    1682:	17 06       	cpc	r1, r23
    1684:	e8 07       	cpc	r30, r24
    1686:	f9 07       	cpc	r31, r25
    1688:	c0 f0       	brcs	.+48     	; 0x16ba <__fp_cmp+0x46>
    168a:	12 16       	cp	r1, r18
    168c:	13 06       	cpc	r1, r19
    168e:	e4 07       	cpc	r30, r20
    1690:	f5 07       	cpc	r31, r21
    1692:	98 f0       	brcs	.+38     	; 0x16ba <__fp_cmp+0x46>
    1694:	62 1b       	sub	r22, r18
    1696:	73 0b       	sbc	r23, r19
    1698:	84 0b       	sbc	r24, r20
    169a:	95 0b       	sbc	r25, r21
    169c:	39 f4       	brne	.+14     	; 0x16ac <__fp_cmp+0x38>
    169e:	0a 26       	eor	r0, r26
    16a0:	61 f0       	breq	.+24     	; 0x16ba <__fp_cmp+0x46>
    16a2:	23 2b       	or	r18, r19
    16a4:	24 2b       	or	r18, r20
    16a6:	25 2b       	or	r18, r21
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <__fp_cmp+0x3e>
    16aa:	08 95       	ret
    16ac:	0a 26       	eor	r0, r26
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <__fp_cmp+0x3e>
    16b0:	a1 40       	sbci	r26, 0x01	; 1
    16b2:	a6 95       	lsr	r26
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	81 1d       	adc	r24, r1
    16b8:	81 1d       	adc	r24, r1
    16ba:	08 95       	ret

000016bc <__fp_inf>:
    16bc:	97 f9       	bld	r25, 7
    16be:	9f 67       	ori	r25, 0x7F	; 127
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	08 95       	ret

000016c8 <__fp_nan>:
    16c8:	9f ef       	ldi	r25, 0xFF	; 255
    16ca:	80 ec       	ldi	r24, 0xC0	; 192
    16cc:	08 95       	ret

000016ce <__fp_pscA>:
    16ce:	00 24       	eor	r0, r0
    16d0:	0a 94       	dec	r0
    16d2:	16 16       	cp	r1, r22
    16d4:	17 06       	cpc	r1, r23
    16d6:	18 06       	cpc	r1, r24
    16d8:	09 06       	cpc	r0, r25
    16da:	08 95       	ret

000016dc <__fp_pscB>:
    16dc:	00 24       	eor	r0, r0
    16de:	0a 94       	dec	r0
    16e0:	12 16       	cp	r1, r18
    16e2:	13 06       	cpc	r1, r19
    16e4:	14 06       	cpc	r1, r20
    16e6:	05 06       	cpc	r0, r21
    16e8:	08 95       	ret

000016ea <__fp_round>:
    16ea:	09 2e       	mov	r0, r25
    16ec:	03 94       	inc	r0
    16ee:	00 0c       	add	r0, r0
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <__fp_round+0xc>
    16f2:	88 23       	and	r24, r24
    16f4:	52 f0       	brmi	.+20     	; 0x170a <__fp_round+0x20>
    16f6:	bb 0f       	add	r27, r27
    16f8:	40 f4       	brcc	.+16     	; 0x170a <__fp_round+0x20>
    16fa:	bf 2b       	or	r27, r31
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_round+0x18>
    16fe:	60 ff       	sbrs	r22, 0
    1700:	04 c0       	rjmp	.+8      	; 0x170a <__fp_round+0x20>
    1702:	6f 5f       	subi	r22, 0xFF	; 255
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__fp_split3>:
    170c:	57 fd       	sbrc	r21, 7
    170e:	90 58       	subi	r25, 0x80	; 128
    1710:	44 0f       	add	r20, r20
    1712:	55 1f       	adc	r21, r21
    1714:	59 f0       	breq	.+22     	; 0x172c <__fp_splitA+0x10>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	71 f0       	breq	.+28     	; 0x1736 <__fp_splitA+0x1a>
    171a:	47 95       	ror	r20

0000171c <__fp_splitA>:
    171c:	88 0f       	add	r24, r24
    171e:	97 fb       	bst	r25, 7
    1720:	99 1f       	adc	r25, r25
    1722:	61 f0       	breq	.+24     	; 0x173c <__fp_splitA+0x20>
    1724:	9f 3f       	cpi	r25, 0xFF	; 255
    1726:	79 f0       	breq	.+30     	; 0x1746 <__fp_splitA+0x2a>
    1728:	87 95       	ror	r24
    172a:	08 95       	ret
    172c:	12 16       	cp	r1, r18
    172e:	13 06       	cpc	r1, r19
    1730:	14 06       	cpc	r1, r20
    1732:	55 1f       	adc	r21, r21
    1734:	f2 cf       	rjmp	.-28     	; 0x171a <__fp_split3+0xe>
    1736:	46 95       	lsr	r20
    1738:	f1 df       	rcall	.-30     	; 0x171c <__fp_splitA>
    173a:	08 c0       	rjmp	.+16     	; 0x174c <__fp_splitA+0x30>
    173c:	16 16       	cp	r1, r22
    173e:	17 06       	cpc	r1, r23
    1740:	18 06       	cpc	r1, r24
    1742:	99 1f       	adc	r25, r25
    1744:	f1 cf       	rjmp	.-30     	; 0x1728 <__fp_splitA+0xc>
    1746:	86 95       	lsr	r24
    1748:	71 05       	cpc	r23, r1
    174a:	61 05       	cpc	r22, r1
    174c:	08 94       	sec
    174e:	08 95       	ret

00001750 <__fp_zero>:
    1750:	e8 94       	clt

00001752 <__fp_szero>:
    1752:	bb 27       	eor	r27, r27
    1754:	66 27       	eor	r22, r22
    1756:	77 27       	eor	r23, r23
    1758:	cb 01       	movw	r24, r22
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <__gesf2>:
    175e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__fp_cmp>
    1762:	08 f4       	brcc	.+2      	; 0x1766 <__gesf2+0x8>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	08 95       	ret

00001768 <__mulsf3>:
    1768:	0e 94 c7 0b 	call	0x178e	; 0x178e <__mulsf3x>
    176c:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_round>
    1770:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_pscA>
    1774:	38 f0       	brcs	.+14     	; 0x1784 <__mulsf3+0x1c>
    1776:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_pscB>
    177a:	20 f0       	brcs	.+8      	; 0x1784 <__mulsf3+0x1c>
    177c:	95 23       	and	r25, r21
    177e:	11 f0       	breq	.+4      	; 0x1784 <__mulsf3+0x1c>
    1780:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_inf>
    1784:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_nan>
    1788:	11 24       	eor	r1, r1
    178a:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_szero>

0000178e <__mulsf3x>:
    178e:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_split3>
    1792:	70 f3       	brcs	.-36     	; 0x1770 <__mulsf3+0x8>

00001794 <__mulsf3_pse>:
    1794:	95 9f       	mul	r25, r21
    1796:	c1 f3       	breq	.-16     	; 0x1788 <__mulsf3+0x20>
    1798:	95 0f       	add	r25, r21
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	55 1f       	adc	r21, r21
    179e:	62 9f       	mul	r22, r18
    17a0:	f0 01       	movw	r30, r0
    17a2:	72 9f       	mul	r23, r18
    17a4:	bb 27       	eor	r27, r27
    17a6:	f0 0d       	add	r31, r0
    17a8:	b1 1d       	adc	r27, r1
    17aa:	63 9f       	mul	r22, r19
    17ac:	aa 27       	eor	r26, r26
    17ae:	f0 0d       	add	r31, r0
    17b0:	b1 1d       	adc	r27, r1
    17b2:	aa 1f       	adc	r26, r26
    17b4:	64 9f       	mul	r22, r20
    17b6:	66 27       	eor	r22, r22
    17b8:	b0 0d       	add	r27, r0
    17ba:	a1 1d       	adc	r26, r1
    17bc:	66 1f       	adc	r22, r22
    17be:	82 9f       	mul	r24, r18
    17c0:	22 27       	eor	r18, r18
    17c2:	b0 0d       	add	r27, r0
    17c4:	a1 1d       	adc	r26, r1
    17c6:	62 1f       	adc	r22, r18
    17c8:	73 9f       	mul	r23, r19
    17ca:	b0 0d       	add	r27, r0
    17cc:	a1 1d       	adc	r26, r1
    17ce:	62 1f       	adc	r22, r18
    17d0:	83 9f       	mul	r24, r19
    17d2:	a0 0d       	add	r26, r0
    17d4:	61 1d       	adc	r22, r1
    17d6:	22 1f       	adc	r18, r18
    17d8:	74 9f       	mul	r23, r20
    17da:	33 27       	eor	r19, r19
    17dc:	a0 0d       	add	r26, r0
    17de:	61 1d       	adc	r22, r1
    17e0:	23 1f       	adc	r18, r19
    17e2:	84 9f       	mul	r24, r20
    17e4:	60 0d       	add	r22, r0
    17e6:	21 1d       	adc	r18, r1
    17e8:	82 2f       	mov	r24, r18
    17ea:	76 2f       	mov	r23, r22
    17ec:	6a 2f       	mov	r22, r26
    17ee:	11 24       	eor	r1, r1
    17f0:	9f 57       	subi	r25, 0x7F	; 127
    17f2:	50 40       	sbci	r21, 0x00	; 0
    17f4:	9a f0       	brmi	.+38     	; 0x181c <__mulsf3_pse+0x88>
    17f6:	f1 f0       	breq	.+60     	; 0x1834 <__mulsf3_pse+0xa0>
    17f8:	88 23       	and	r24, r24
    17fa:	4a f0       	brmi	.+18     	; 0x180e <__mulsf3_pse+0x7a>
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	bb 1f       	adc	r27, r27
    1802:	66 1f       	adc	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	91 50       	subi	r25, 0x01	; 1
    180a:	50 40       	sbci	r21, 0x00	; 0
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <__mulsf3_pse+0x64>
    180e:	9e 3f       	cpi	r25, 0xFE	; 254
    1810:	51 05       	cpc	r21, r1
    1812:	80 f0       	brcs	.+32     	; 0x1834 <__mulsf3_pse+0xa0>
    1814:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_inf>
    1818:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_szero>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	e4 f3       	brlt	.-8      	; 0x1818 <__mulsf3_pse+0x84>
    1820:	98 3e       	cpi	r25, 0xE8	; 232
    1822:	d4 f3       	brlt	.-12     	; 0x1818 <__mulsf3_pse+0x84>
    1824:	86 95       	lsr	r24
    1826:	77 95       	ror	r23
    1828:	67 95       	ror	r22
    182a:	b7 95       	ror	r27
    182c:	f7 95       	ror	r31
    182e:	e7 95       	ror	r30
    1830:	9f 5f       	subi	r25, 0xFF	; 255
    1832:	c1 f7       	brne	.-16     	; 0x1824 <__mulsf3_pse+0x90>
    1834:	fe 2b       	or	r31, r30
    1836:	88 0f       	add	r24, r24
    1838:	91 1d       	adc	r25, r1
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret

00001842 <__udivmodhi4>:
    1842:	aa 1b       	sub	r26, r26
    1844:	bb 1b       	sub	r27, r27
    1846:	51 e1       	ldi	r21, 0x11	; 17
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <__udivmodhi4_ep>

0000184a <__udivmodhi4_loop>:
    184a:	aa 1f       	adc	r26, r26
    184c:	bb 1f       	adc	r27, r27
    184e:	a6 17       	cp	r26, r22
    1850:	b7 07       	cpc	r27, r23
    1852:	10 f0       	brcs	.+4      	; 0x1858 <__udivmodhi4_ep>
    1854:	a6 1b       	sub	r26, r22
    1856:	b7 0b       	sbc	r27, r23

00001858 <__udivmodhi4_ep>:
    1858:	88 1f       	adc	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	5a 95       	dec	r21
    185e:	a9 f7       	brne	.-22     	; 0x184a <__udivmodhi4_loop>
    1860:	80 95       	com	r24
    1862:	90 95       	com	r25
    1864:	bc 01       	movw	r22, r24
    1866:	cd 01       	movw	r24, r26
    1868:	08 95       	ret

0000186a <_exit>:
    186a:	f8 94       	cli

0000186c <__stop_program>:
    186c:	ff cf       	rjmp	.-2      	; 0x186c <__stop_program>
