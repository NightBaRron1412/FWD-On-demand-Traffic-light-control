
On-demand-Traffic_Light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000018b6  0000194a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  0080006e  0080006e  00001958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6c  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb1  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b2e  00000000  00000000  00004871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  000063a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dbc  00000000  00000000  00006bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022c4  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00009c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_1>
       8:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_2>
       c:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_3>
      10:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_4>
      14:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_5>
      18:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_6>
      1c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_7>
      20:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_8>
      24:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_9>
      28:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_10>
      2c:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
      8a:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time_is_up>:
 * Output: void
 */
void time_is_up(void)
{
    /* set the timeisUp flag to indicate that time have passed */
    timeisUp = TRUE;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timeisUp>
      98:	08 95       	ret

0000009a <pedestrian_buttonISR>:
/* ========================== Pedestrian Button ISR Function ========================== */

void pedestrian_buttonISR(void)
{
    /* get the states of car LEDs */
    DIO_u8GetPinValue(PORT_A, PIN_0, &carGreenLEDState);
      9a:	4c eb       	ldi	r20, 0xBC	; 188
      9c:	50 e0       	ldi	r21, 0x00	; 0
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>
    DIO_u8GetPinValue(PORT_A, PIN_2, &carRedLEDState);
      a6:	4d eb       	ldi	r20, 0xBD	; 189
      a8:	50 e0       	ldi	r21, 0x00	; 0
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>

    /* check if the pedestrian button is pressed while red light is on */
    if (carRedLEDState == HIGH && pressedRedisOn == FALSE && pressedGreen_YellowisOn == FALSE)
      b2:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <carRedLEDState>
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	91 f4       	brne	.+36     	; 0xde <pedestrian_buttonISR+0x44>
      ba:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressedRedisOn>
      be:	81 11       	cpse	r24, r1
      c0:	0e c0       	rjmp	.+28     	; 0xde <pedestrian_buttonISR+0x44>
      c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
      c6:	81 11       	cpse	r24, r1
      c8:	0a c0       	rjmp	.+20     	; 0xde <pedestrian_buttonISR+0x44>
    {
        LED_u8Off(PED_RED);
      ca:	85 e0       	ldi	r24, 0x05	; 5
      cc:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        LED_u8On(PED_GREEN);
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>
        pressedRedisOn = TRUE;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pressedRedisOn>
      dc:	08 95       	ret
    }

    /* check if the pedestrian button is pressed while green or yellow light is on */
    else if ((carGreenLEDState == HIGH || carYellowLEDState == HIGH) && pressedRedisOn == FALSE && pressedGreen_YellowisOn == FALSE)
      de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <carGreenLEDState>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	21 f0       	breq	.+8      	; 0xee <pedestrian_buttonISR+0x54>
      e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <carYellowLEDState>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	89 f4       	brne	.+34     	; 0x110 <pedestrian_buttonISR+0x76>
      ee:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressedRedisOn>
      f2:	81 11       	cpse	r24, r1
      f4:	0d c0       	rjmp	.+26     	; 0x110 <pedestrian_buttonISR+0x76>
      f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
      fa:	81 11       	cpse	r24, r1
      fc:	09 c0       	rjmp	.+18     	; 0x110 <pedestrian_buttonISR+0x76>
    {
        pressedGreen_YellowisOn = TRUE;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <pressedGreen_YellowisOn>

        /* check if the yellow light is blinking */
        if (carYellowLEDState == HIGH)
     104:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <carYellowLEDState>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	11 f4       	brne	.+4      	; 0x110 <pedestrian_buttonISR+0x76>
        {
            /* reset the yellow blinking loop */
            resetYellowBlinking = TRUE;
     10c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
     110:	08 95       	ret

00000112 <delay_5sec>:
 * Output: void
 */
void delay_5sec(void)
{
    /* reset timeisUp flag */
    timeisUp = FALSE;
     112:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timeisUp>

    /* set the timer to count for 5 seconds */
    TMR_u8SetDesiredTime(TIMER_0, 5 * SEC);
     116:	40 e4       	ldi	r20, 0x40	; 64
     118:	5b e4       	ldi	r21, 0x4B	; 75
     11a:	6c e4       	ldi	r22, 0x4C	; 76
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 65 07 	call	0xeca	; 0xeca <TMR_u8SetDesiredTime>

    /* wait until 5 seconds have passed */
    while (timeisUp != TRUE)
     124:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timeisUp>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	e1 f7       	brne	.-8      	; 0x124 <delay_5sec+0x12>
        ;
}
     12c:	08 95       	ret

0000012e <delay_500msec>:
 * Output: void
 */
void delay_500msec(void)
{
    /* reset timeisUp flag */
    timeisUp = FALSE;
     12e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timeisUp>

    /* set the timer to count for 500 milliseconds */
    TMR_u8SetDesiredTime(TIMER_0, 500 * mSEC);
     132:	40 e2       	ldi	r20, 0x20	; 32
     134:	51 ea       	ldi	r21, 0xA1	; 161
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 65 07 	call	0xeca	; 0xeca <TMR_u8SetDesiredTime>

    /* wait until 500 milliseconds have passed */
    while (timeisUp != TRUE)
     140:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timeisUp>
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	e1 f7       	brne	.-8      	; 0x140 <delay_500msec+0x12>
        ;
}
     148:	08 95       	ret

0000014a <yellow_blink>:
 * Description: a function to preform yellow light blinking
 * Inputs: mode to indicate which yellow light to blink
 * Output: void
 */
void yellow_blink(u8 mode)
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	d8 2f       	mov	r29, r24
    /* a flag to indicate that the yellow light is blinking */
    carYellowLEDState = HIGH;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <carYellowLEDState>

    /* Blinking the yellow LEDs every second for 5 secs */
    for (u8 i = 1; i <= 5; i++)
     156:	c1 e0       	ldi	r28, 0x01	; 1
     158:	23 c0       	rjmp	.+70     	; 0x1a0 <yellow_blink+0x56>
    {
        LED_u8On(CAR_YELLOW);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>

        /* check if the pedestrian yellow light is required to be blinking */
        if (mode == BOTH_YELLOW)
     160:	d5 36       	cpi	r29, 0x65	; 101
     162:	19 f4       	brne	.+6      	; 0x16a <yellow_blink+0x20>
        {
            LED_u8On(PED_YELLOW);
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>
        }

        /* check if the yellow blinking loop should be reset */
        if (resetYellowBlinking)
     16a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     16e:	88 23       	and	r24, r24
     170:	19 f0       	breq	.+6      	; 0x178 <yellow_blink+0x2e>
        {
            /* reset the yellow blinking loop */
            resetYellowBlinking = FALSE;
     172:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
            break;
     176:	16 c0       	rjmp	.+44     	; 0x1a4 <yellow_blink+0x5a>
        }

        delay_500msec();
     178:	0e 94 97 00 	call	0x12e	; 0x12e <delay_500msec>

        LED_u8Off(CAR_YELLOW);
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>

        /* check if the pedestrian yellow light is required to be blinking */
        if (mode == BOTH_YELLOW)
     182:	d5 36       	cpi	r29, 0x65	; 101
     184:	19 f4       	brne	.+6      	; 0x18c <yellow_blink+0x42>
        {
            LED_u8Off(PED_YELLOW);
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        }

        /* check if the yellow blinking loop should be reset */
        if (resetYellowBlinking)
     18c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     190:	88 23       	and	r24, r24
     192:	19 f0       	breq	.+6      	; 0x19a <yellow_blink+0x50>
        {
            /* reset the yellow blinking loop */
            resetYellowBlinking = FALSE;
     194:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
            break;
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <yellow_blink+0x5a>
        }

        delay_500msec();
     19a:	0e 94 97 00 	call	0x12e	; 0x12e <delay_500msec>
{
    /* a flag to indicate that the yellow light is blinking */
    carYellowLEDState = HIGH;

    /* Blinking the yellow LEDs every second for 5 secs */
    for (u8 i = 1; i <= 5; i++)
     19e:	cf 5f       	subi	r28, 0xFF	; 255
     1a0:	c6 30       	cpi	r28, 0x06	; 6
     1a2:	d8 f2       	brcs	.-74     	; 0x15a <yellow_blink+0x10>

        delay_500msec();
    }

    /* reset the yellow light state */
    carYellowLEDState = LOW;
     1a4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <carYellowLEDState>
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <pedestrian_mode_green_yellow>:
 * Output: void
 */
void pedestrian_mode_green_yellow(void)
{
    /* Check if the pedestrian button is pressed */
    switch (pressedGreen_YellowisOn)
     1ae:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
     1b2:	88 23       	and	r24, r24
     1b4:	01 f1       	breq	.+64     	; 0x1f6 <pedestrian_mode_green_yellow+0x48>
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	09 f5       	brne	.+66     	; 0x1fc <pedestrian_mode_green_yellow+0x4e>
    {
    case TRUE:
        /* Turn off the car green light */
        LED_u8Off(CAR_GREEN);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>

        /* Blinking both yellow LEDs for 5 secs */
        yellow_blink(BOTH_YELLOW);
     1c0:	85 e6       	ldi	r24, 0x65	; 101
     1c2:	0e 94 a5 00 	call	0x14a	; 0x14a <yellow_blink>

        /* Turn on the pedestrian green light and the car red light for 5 sec */
        LED_u8Off(PED_RED);
     1c6:	85 e0       	ldi	r24, 0x05	; 5
     1c8:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        LED_u8On(PED_GREEN);
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>
        LED_u8On(CAR_RED);
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>
        delay_5sec();
     1d8:	0e 94 89 00 	call	0x112	; 0x112 <delay_5sec>
        LED_u8Off(CAR_RED);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>

        /* Blinking both yellow LEDs for 5 secs while pedestrian green light is still on */
        yellow_blink(BOTH_YELLOW);
     1e2:	85 e6       	ldi	r24, 0x65	; 101
     1e4:	0e 94 a5 00 	call	0x14a	; 0x14a <yellow_blink>

        /* Turn off the pedestrian green light and turn on the pedestrian red light */
        LED_u8Off(PED_GREEN);
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        LED_u8On(PED_RED);
     1ee:	85 e0       	ldi	r24, 0x05	; 5
     1f0:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>

        break;
     1f4:	08 95       	ret

    case FALSE:
        /* Turn off the car green light */
        LED_u8Off(CAR_GREEN);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
     1fc:	08 95       	ret

000001fe <pedestrian_mode_red>:
 * Output: void
 */
void pedestrian_mode_red(void)
{
    /* Check if the pedestrian button is pressed */
    switch (pressedRedisOn)
     1fe:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressedRedisOn>
     202:	88 23       	and	r24, r24
     204:	89 f0       	breq	.+34     	; 0x228 <pedestrian_mode_red+0x2a>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	b9 f4       	brne	.+46     	; 0x238 <pedestrian_mode_red+0x3a>
    {
    case TRUE:
        /* wait for 5 seconds while car red light and pedestrian green light is on */
        delay_5sec();
     20a:	0e 94 89 00 	call	0x112	; 0x112 <delay_5sec>

        /* Turn off the car red light and blink both yellow LEDs for 5 sec while pedestrian green light is still on */
        LED_u8Off(CAR_RED);
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        yellow_blink(BOTH_YELLOW);
     214:	85 e6       	ldi	r24, 0x65	; 101
     216:	0e 94 a5 00 	call	0x14a	; 0x14a <yellow_blink>

        /* Turn off the pedestrian green light and turn on the pedestrian red light */
        LED_u8Off(PED_GREEN);
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        LED_u8On(PED_RED);
     220:	85 e0       	ldi	r24, 0x05	; 5
     222:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>

        break;
     226:	08 95       	ret

    case FALSE:
        /* Turn off the car red light and blink the car yellow LED for 5 sec */
        LED_u8Off(CAR_RED);
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>
        yellow_blink(CAR_YELLOW);
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 a5 00 	call	0x14a	; 0x14a <yellow_blink>

        /* Check if pedestrian button is pressed while yellow light was blinking */
        pedestrian_mode_green_yellow();
     234:	0e 94 d7 00 	call	0x1ae	; 0x1ae <pedestrian_mode_green_yellow>
     238:	08 95       	ret

0000023a <APP_VidStart>:
/* ========================== Application function ========================== */

void APP_VidStart(void)
{
    /* set the call back functions */
    EXTI_u8SetCallBack(TIMER_0, pedestrian_buttonISR);
     23a:	6d e4       	ldi	r22, 0x4D	; 77
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 61 04 	call	0x8c2	; 0x8c2 <EXTI_u8SetCallBack>
    TMR_u8SetCallBack(TIMER_0, time_is_up);
     244:	69 e4       	ldi	r22, 0x49	; 73
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 b1 07 	call	0xf62	; 0xf62 <TMR_u8SetCallBack>

    /* initialize the peripherals */
    DIO_VidInit();
     24e:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_VidInit>
    GIE_VidEnable();
     252:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <GIE_VidEnable>
    EXTI_VidInit();
     256:	0e 94 48 04 	call	0x890	; 0x890 <EXTI_VidInit>
    TMR_VidInit();
     25a:	0e 94 37 07 	call	0xe6e	; 0xe6e <TMR_VidInit>
    LED_VidInit();
     25e:	0e 94 b4 01 	call	0x368	; 0x368 <LED_VidInit>
    BTN_VidInit();
     262:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BTN_VidInit>

    while (TRUE)
    {
        /* Turn on the car green LED for 5 secs*/
        LED_u8On(CAR_GREEN);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>

        /* wait until 5 seconds have passed or if the pedestrian button is pressed while green light was on */
        timeisUp = FALSE;
     26c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timeisUp>
        TMR_u8SetDesiredTime(TIMER_0, 5 * SEC);
     270:	40 e4       	ldi	r20, 0x40	; 64
     272:	5b e4       	ldi	r21, 0x4B	; 75
     274:	6c e4       	ldi	r22, 0x4C	; 76
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 65 07 	call	0xeca	; 0xeca <TMR_u8SetDesiredTime>
        while (timeisUp != TRUE && pressedGreen_YellowisOn != TRUE)
     27e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timeisUp>
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	21 f0       	breq	.+8      	; 0x28e <APP_VidStart+0x54>
     286:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	c1 f7       	brne	.-16     	; 0x27e <APP_VidStart+0x44>
            ;

        /* Turn off pedestrian red light in case it was on */
        LED_u8Off(PED_RED);
     28e:	85 e0       	ldi	r24, 0x05	; 5
     290:	0e 94 3a 02 	call	0x474	; 0x474 <LED_u8Off>

        /* Check if pedestrian button is pressed while green light was on */
        pedestrian_mode_green_yellow();
     294:	0e 94 d7 00 	call	0x1ae	; 0x1ae <pedestrian_mode_green_yellow>

        if (pressedGreen_YellowisOn)
     298:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
     29c:	88 23       	and	r24, r24
     29e:	19 f0       	breq	.+6      	; 0x2a6 <APP_VidStart+0x6c>
        {
            /* reset the pressedGreen_YellowisOn variable */
            pressedGreen_YellowisOn = FALSE;
     2a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <pressedGreen_YellowisOn>

            /* go back to normal mode */
            continue;
     2a4:	e0 cf       	rjmp	.-64     	; 0x266 <APP_VidStart+0x2c>
        }

        /* blink the car yellow LED for 5 secs */
        yellow_blink(CAR_YELLOW);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 a5 00 	call	0x14a	; 0x14a <yellow_blink>

        pedestrian_mode_green_yellow();
     2ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <pedestrian_mode_green_yellow>

        if (pressedGreen_YellowisOn)
     2b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <pressedGreen_YellowisOn>
     2b4:	88 23       	and	r24, r24
     2b6:	19 f0       	breq	.+6      	; 0x2be <APP_VidStart+0x84>
        {
            /* reset the pressedGreen_YellowisOn variable */
            pressedGreen_YellowisOn = FALSE;
     2b8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <pressedGreen_YellowisOn>

            /* go back to normal mode */
            continue;
     2bc:	d4 cf       	rjmp	.-88     	; 0x266 <APP_VidStart+0x2c>
        }

        /* Turn on the car red LED for 5 secs */
        LED_u8On(CAR_RED);
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 12 02 	call	0x424	; 0x424 <LED_u8On>

        /* wait until 5 seconds have passed or if the pedestrian button is pressed while red light was on */
        timeisUp = FALSE;
     2c4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timeisUp>
        TMR_u8SetDesiredTime(TIMER_0, 5 * SEC);
     2c8:	40 e4       	ldi	r20, 0x40	; 64
     2ca:	5b e4       	ldi	r21, 0x4B	; 75
     2cc:	6c e4       	ldi	r22, 0x4C	; 76
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 65 07 	call	0xeca	; 0xeca <TMR_u8SetDesiredTime>
        while (timeisUp != TRUE && pressedRedisOn != TRUE)
     2d6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timeisUp>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	21 f0       	breq	.+8      	; 0x2e6 <APP_VidStart+0xac>
     2de:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressedRedisOn>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	c1 f7       	brne	.-16     	; 0x2d6 <APP_VidStart+0x9c>
            ;

        /* Check if pedestrian button is pressed while green light was on */
        pedestrian_mode_red();
     2e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pedestrian_mode_red>

        if (pressedRedisOn)
     2ea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressedRedisOn>
     2ee:	88 23       	and	r24, r24
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <APP_VidStart+0xba>
     2f2:	b9 cf       	rjmp	.-142    	; 0x266 <APP_VidStart+0x2c>
        {
            /* reset the pressedRedisOn variable */
            pressedRedisOn = FALSE;
     2f4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <pressedRedisOn>

            /* go back to normal mode */
            continue;
     2f8:	b6 cf       	rjmp	.-148    	; 0x266 <APP_VidStart+0x2c>

000002fa <BTN_VidInit>:
 * Description: Function to set the initialized configuration of each Button
 * Inputs: none
 * Output: void
 */
void BTN_VidInit(void)
{
     2fa:	cf 93       	push	r28
	/* Loop on all buttons */
	for (u8 Local_u8ButtonNb = 0; Local_u8ButtonNb < BTN_NUM_OF_BUTTONS; Local_u8ButtonNb++)
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	30 c0       	rjmp	.+96     	; 0x360 <BTN_VidInit+0x66>
	{
		switch (BTN_Au8ButtonConnection[Local_u8ButtonNb])
     300:	8c 2f       	mov	r24, r28
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	ee 58       	subi	r30, 0x8E	; 142
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	20 81       	ld	r18, Z
     30c:	21 30       	cpi	r18, 0x01	; 1
     30e:	21 f0       	breq	.+8      	; 0x318 <BTN_VidInit+0x1e>
     310:	d8 f0       	brcs	.+54     	; 0x348 <BTN_VidInit+0x4e>
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	69 f0       	breq	.+26     	; 0x330 <BTN_VidInit+0x36>
     316:	23 c0       	rjmp	.+70     	; 0x35e <BTN_VidInit+0x64>
		{
		case BTN_INT_PULL_UP:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT_PULLUP);
     318:	fc 01       	movw	r30, r24
     31a:	e0 5a       	subi	r30, 0xA0	; 160
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	dc 01       	movw	r26, r24
     320:	af 59       	subi	r26, 0x9F	; 159
     322:	bf 4f       	sbci	r27, 0xFF	; 255
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	60 81       	ld	r22, Z
     328:	8c 91       	ld	r24, X
     32a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_u8SetPinDirection>
			break;
     32e:	17 c0       	rjmp	.+46     	; 0x35e <BTN_VidInit+0x64>
		case BTN_EXT_PULL_UP:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
     330:	fc 01       	movw	r30, r24
     332:	e0 5a       	subi	r30, 0xA0	; 160
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	dc 01       	movw	r26, r24
     338:	af 59       	subi	r26, 0x9F	; 159
     33a:	bf 4f       	sbci	r27, 0xFF	; 255
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	60 81       	ld	r22, Z
     340:	8c 91       	ld	r24, X
     342:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_u8SetPinDirection>
			break;
     346:	0b c0       	rjmp	.+22     	; 0x35e <BTN_VidInit+0x64>
		case BTN_PULL_DOWN:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
     348:	fc 01       	movw	r30, r24
     34a:	e0 5a       	subi	r30, 0xA0	; 160
     34c:	ff 4f       	sbci	r31, 0xFF	; 255
     34e:	dc 01       	movw	r26, r24
     350:	af 59       	subi	r26, 0x9F	; 159
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	60 81       	ld	r22, Z
     358:	8c 91       	ld	r24, X
     35a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_u8SetPinDirection>
 * Output: void
 */
void BTN_VidInit(void)
{
	/* Loop on all buttons */
	for (u8 Local_u8ButtonNb = 0; Local_u8ButtonNb < BTN_NUM_OF_BUTTONS; Local_u8ButtonNb++)
     35e:	cf 5f       	subi	r28, 0xFF	; 255
     360:	cc 23       	and	r28, r28
     362:	71 f2       	breq	.-100    	; 0x300 <BTN_VidInit+0x6>
		case BTN_PULL_DOWN:
			DIO_u8SetPinDirection(BTN_Au8ButtonPort[Local_u8ButtonNb], BTN_Au8ButtonPin[Local_u8ButtonNb], INPUT);
			break;
		}
	}
}
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <LED_VidInit>:
 * Description: Function to set the initialized configuration of each LED
 * Inputs: none
 * Output: void
 */
void LED_VidInit(void)
{
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
	/* Loop on all LEDs */
	for (u8 Local_u8LEDNb = 0; Local_u8LEDNb < LED_NUM_OF_LEDS; Local_u8LEDNb++)
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	52 c0       	rjmp	.+164    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		/* Set pin direction to output */
		DIO_u8SetPinDirection(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], OUTPUT);
     372:	c1 2f       	mov	r28, r17
     374:	d0 e0       	ldi	r29, 0x00	; 0
     376:	de 01       	movw	r26, r28
     378:	ae 59       	subi	r26, 0x9E	; 158
     37a:	bf 4f       	sbci	r27, 0xFF	; 255
     37c:	fe 01       	movw	r30, r28
     37e:	e8 59       	subi	r30, 0x98	; 152
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	42 e0       	ldi	r20, 0x02	; 2
     384:	6c 91       	ld	r22, X
     386:	80 81       	ld	r24, Z
     388:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_u8SetPinDirection>

		/* Setting LED to init state */
		switch (LED_Au8LedDirection[Local_u8LEDNb])
     38c:	fe 01       	movw	r30, r28
     38e:	e7 58       	subi	r30, 0x87	; 135
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	80 81       	ld	r24, Z
     394:	88 23       	and	r24, r24
     396:	19 f0       	breq	.+6      	; 0x39e <LED_VidInit+0x36>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	f9 f0       	breq	.+62     	; 0x3da <LED_VidInit+0x72>
     39c:	3b c0       	rjmp	.+118    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
		case LED_FORWARD:
			switch (LED_Au8LedState[Local_u8LEDNb])
     39e:	fe 01       	movw	r30, r28
     3a0:	ed 58       	subi	r30, 0x8D	; 141
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	80 81       	ld	r24, Z
     3a6:	88 23       	and	r24, r24
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <LED_VidInit+0x5c>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	99 f5       	brne	.+102    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
			case LED_ON:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], HIGH);
     3ae:	fe 01       	movw	r30, r28
     3b0:	ee 59       	subi	r30, 0x9E	; 158
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
     3b4:	c8 59       	subi	r28, 0x98	; 152
     3b6:	df 4f       	sbci	r29, 0xFF	; 255
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	60 81       	ld	r22, Z
     3bc:	88 81       	ld	r24, Y
     3be:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
				break;
     3c2:	28 c0       	rjmp	.+80     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			case LED_OFF:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], LOW);
     3c4:	fe 01       	movw	r30, r28
     3c6:	ee 59       	subi	r30, 0x9E	; 158
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	c8 59       	subi	r28, 0x98	; 152
     3cc:	df 4f       	sbci	r29, 0xFF	; 255
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 81       	ld	r22, Z
     3d2:	88 81       	ld	r24, Y
     3d4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
				break;
     3d8:	1d c0       	rjmp	.+58     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			break;

		case LED_REVERSE:
			switch (LED_Au8LedState[Local_u8LEDNb])
     3da:	fe 01       	movw	r30, r28
     3dc:	ed 58       	subi	r30, 0x8D	; 141
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	80 81       	ld	r24, Z
     3e2:	88 23       	and	r24, r24
     3e4:	69 f0       	breq	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	a9 f4       	brne	.+42     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
			case LED_ON:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], LOW);
     3ea:	fe 01       	movw	r30, r28
     3ec:	ee 59       	subi	r30, 0x9E	; 158
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	c8 59       	subi	r28, 0x98	; 152
     3f2:	df 4f       	sbci	r29, 0xFF	; 255
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	60 81       	ld	r22, Z
     3f8:	88 81       	ld	r24, Y
     3fa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
				break;
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			case LED_OFF:
				DIO_u8SetPinValue(LED_Au8LedPort[Local_u8LEDNb], LED_Au8LedPin[Local_u8LEDNb], HIGH);
     400:	fe 01       	movw	r30, r28
     402:	ee 59       	subi	r30, 0x9E	; 158
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	c8 59       	subi	r28, 0x98	; 152
     408:	df 4f       	sbci	r29, 0xFF	; 255
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	60 81       	ld	r22, Z
     40e:	88 81       	ld	r24, Y
     410:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
 * Output: void
 */
void LED_VidInit(void)
{
	/* Loop on all LEDs */
	for (u8 Local_u8LEDNb = 0; Local_u8LEDNb < LED_NUM_OF_LEDS; Local_u8LEDNb++)
     414:	1f 5f       	subi	r17, 0xFF	; 255
     416:	16 30       	cpi	r17, 0x06	; 6
     418:	08 f4       	brcc	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     41a:	ab cf       	rjmp	.-170    	; 0x372 <LED_VidInit+0xa>
				break;
			}
			break;
		}
	}
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	08 95       	ret

00000424 <LED_u8On>:
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
     424:	86 30       	cpi	r24, 0x06	; 6
     426:	10 f5       	brcc	.+68     	; 0x46c <LED_u8On+0x48>
	}

	else
	{
		/* Check if the LED is forward or reverse */
		switch (LED_Au8LedDirection[Copy_u8LedNumber])
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	fc 01       	movw	r30, r24
     42c:	e7 58       	subi	r30, 0x87	; 135
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	20 81       	ld	r18, Z
     432:	22 23       	and	r18, r18
     434:	19 f0       	breq	.+6      	; 0x43c <LED_u8On+0x18>
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	69 f0       	breq	.+26     	; 0x454 <LED_u8On+0x30>
     43a:	1a c0       	rjmp	.+52     	; 0x470 <LED_u8On+0x4c>
		{
		case LED_FORWARD:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], HIGH);
     43c:	fc 01       	movw	r30, r24
     43e:	ee 59       	subi	r30, 0x9E	; 158
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	60 81       	ld	r22, Z
     444:	fc 01       	movw	r30, r24
     446:	e8 59       	subi	r30, 0x98	; 152
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	80 81       	ld	r24, Z
     44e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
			break;
     452:	08 95       	ret
		case LED_REVERSE:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], LOW);
     454:	fc 01       	movw	r30, r24
     456:	ee 59       	subi	r30, 0x9E	; 158
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	60 81       	ld	r22, Z
     45c:	fc 01       	movw	r30, r24
     45e:	e8 59       	subi	r30, 0x98	; 152
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
			break;
     46a:	08 95       	ret

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
	{
		/* Set the error state to Error */
		Local_u8ErrorState = STATUS_ERROR;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	08 95       	ret
 * Output: the Error state of the function
 */
u8 LED_u8On(u8 Copy_u8LedNumber)
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;
     470:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Return the error state */
	return Local_u8ErrorState;
}
     472:	08 95       	ret

00000474 <LED_u8Off>:
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
     474:	86 30       	cpi	r24, 0x06	; 6
     476:	10 f5       	brcc	.+68     	; 0x4bc <LED_u8Off+0x48>
	}

	else
	{
		/* Check if the LED is forward or reverse */
		switch (LED_Au8LedDirection[Copy_u8LedNumber])
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	e7 58       	subi	r30, 0x87	; 135
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	20 81       	ld	r18, Z
     482:	22 23       	and	r18, r18
     484:	19 f0       	breq	.+6      	; 0x48c <LED_u8Off+0x18>
     486:	21 30       	cpi	r18, 0x01	; 1
     488:	69 f0       	breq	.+26     	; 0x4a4 <LED_u8Off+0x30>
     48a:	1a c0       	rjmp	.+52     	; 0x4c0 <LED_u8Off+0x4c>
		{
		case LED_FORWARD:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], LOW);
     48c:	fc 01       	movw	r30, r24
     48e:	ee 59       	subi	r30, 0x9E	; 158
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	60 81       	ld	r22, Z
     494:	fc 01       	movw	r30, r24
     496:	e8 59       	subi	r30, 0x98	; 152
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
			break;
     4a2:	08 95       	ret
		case LED_REVERSE:
			Local_u8ErrorState = DIO_u8SetPinValue(LED_Au8LedPort[Copy_u8LedNumber], LED_Au8LedPin[Copy_u8LedNumber], HIGH);
     4a4:	fc 01       	movw	r30, r24
     4a6:	ee 59       	subi	r30, 0x9E	; 158
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	60 81       	ld	r22, Z
     4ac:	fc 01       	movw	r30, r24
     4ae:	e8 59       	subi	r30, 0x98	; 152
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	80 81       	ld	r24, Z
     4b6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_u8SetPinValue>
			break;
     4ba:	08 95       	ret

	/* Check if the LED number is valid */
	if (Copy_u8LedNumber >= LED_NUM_OF_LEDS)
	{
		/* Set the error state to Error */
		Local_u8ErrorState = STATUS_ERROR;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	08 95       	ret
 * Output: the Error state of the function
 */
u8 LED_u8Off(u8 Copy_u8LedNumber)
{
	/* Local variable to hold the error state */
	u8 Local_u8ErrorState = STATUS_OK;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Return the error state */
	return Local_u8ErrorState;
}
     4c2:	08 95       	ret

000004c4 <main>:

#include "APP/app_interface.h"

int main(void)
{
    APP_VidStart();
     4c4:	0e 94 1d 01 	call	0x23a	; 0x23a <APP_VidStart>
    return 0;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	08 95       	ret

000004ce <DIO_VidInit>:
        Local_u8Error = STATUS_OK;
    }

    /* Function return */
    return Local_u8Error;
}
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	8a bb       	out	0x1a, r24	; 26
     4d2:	87 bb       	out	0x17, r24	; 23
     4d4:	14 ba       	out	0x14, r1	; 20
     4d6:	11 ba       	out	0x11, r1	; 17
     4d8:	1b ba       	out	0x1b, r1	; 27
     4da:	18 ba       	out	0x18, r1	; 24
     4dc:	15 ba       	out	0x15, r1	; 21
     4de:	12 ba       	out	0x12, r1	; 18
     4e0:	08 95       	ret

000004e2 <DIO_u8SetPinDirection>:
     4e2:	85 30       	cpi	r24, 0x05	; 5
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <DIO_u8SetPinDirection+0x6>
     4e6:	e6 c0       	rjmp	.+460    	; 0x6b4 <DIO_u8SetPinDirection+0x1d2>
     4e8:	68 30       	cpi	r22, 0x08	; 8
     4ea:	08 f0       	brcs	.+2      	; 0x4ee <DIO_u8SetPinDirection+0xc>
     4ec:	e5 c0       	rjmp	.+458    	; 0x6b8 <DIO_u8SetPinDirection+0x1d6>
     4ee:	43 30       	cpi	r20, 0x03	; 3
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <DIO_u8SetPinDirection+0x12>
     4f2:	e4 c0       	rjmp	.+456    	; 0x6bc <DIO_u8SetPinDirection+0x1da>
     4f4:	41 11       	cpse	r20, r1
     4f6:	4f c0       	rjmp	.+158    	; 0x596 <DIO_u8SetPinDirection+0xb4>
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	d1 f0       	breq	.+52     	; 0x530 <DIO_u8SetPinDirection+0x4e>
     4fc:	18 f4       	brcc	.+6      	; 0x504 <DIO_u8SetPinDirection+0x22>
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	31 f0       	breq	.+12     	; 0x50e <DIO_u8SetPinDirection+0x2c>
     502:	de c0       	rjmp	.+444    	; 0x6c0 <DIO_u8SetPinDirection+0x1de>
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	29 f1       	breq	.+74     	; 0x552 <DIO_u8SetPinDirection+0x70>
     508:	84 30       	cpi	r24, 0x04	; 4
     50a:	a1 f1       	breq	.+104    	; 0x574 <DIO_u8SetPinDirection+0x92>
     50c:	d9 c0       	rjmp	.+434    	; 0x6c0 <DIO_u8SetPinDirection+0x1de>
     50e:	2a b3       	in	r18, 0x1a	; 26
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_u8SetPinDirection+0x38>
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	6a 95       	dec	r22
     51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_u8SetPinDirection+0x34>
     51e:	80 95       	com	r24
     520:	92 2f       	mov	r25, r18
     522:	98 23       	and	r25, r24
     524:	9a bb       	out	0x1a, r25	; 26
     526:	9b b3       	in	r25, 0x1b	; 27
     528:	89 23       	and	r24, r25
     52a:	8b bb       	out	0x1b, r24	; 27
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
     530:	27 b3       	in	r18, 0x17	; 23
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPinDirection+0x5a>
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8SetPinDirection+0x56>
     540:	80 95       	com	r24
     542:	92 2f       	mov	r25, r18
     544:	98 23       	and	r25, r24
     546:	97 bb       	out	0x17, r25	; 23
     548:	98 b3       	in	r25, 0x18	; 24
     54a:	89 23       	and	r24, r25
     54c:	88 bb       	out	0x18, r24	; 24
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	08 95       	ret
     552:	24 b3       	in	r18, 0x14	; 20
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_u8SetPinDirection+0x7c>
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	6a 95       	dec	r22
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_u8SetPinDirection+0x78>
     562:	80 95       	com	r24
     564:	92 2f       	mov	r25, r18
     566:	98 23       	and	r25, r24
     568:	94 bb       	out	0x14, r25	; 20
     56a:	95 b3       	in	r25, 0x15	; 21
     56c:	89 23       	and	r24, r25
     56e:	85 bb       	out	0x15, r24	; 21
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	08 95       	ret
     574:	21 b3       	in	r18, 0x11	; 17
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_u8SetPinDirection+0x9e>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	6a 95       	dec	r22
     582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_u8SetPinDirection+0x9a>
     584:	80 95       	com	r24
     586:	92 2f       	mov	r25, r18
     588:	98 23       	and	r25, r24
     58a:	91 bb       	out	0x11, r25	; 17
     58c:	92 b3       	in	r25, 0x12	; 18
     58e:	89 23       	and	r24, r25
     590:	82 bb       	out	0x12, r24	; 18
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	08 95       	ret
     596:	41 30       	cpi	r20, 0x01	; 1
     598:	09 f0       	breq	.+2      	; 0x59c <DIO_u8SetPinDirection+0xba>
     59a:	4e c0       	rjmp	.+156    	; 0x638 <DIO_u8SetPinDirection+0x156>
     59c:	90 b7       	in	r25, 0x30	; 48
     59e:	9b 7f       	andi	r25, 0xFB	; 251
     5a0:	90 bf       	out	0x30, r25	; 48
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	c9 f0       	breq	.+50     	; 0x5d8 <DIO_u8SetPinDirection+0xf6>
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <DIO_u8SetPinDirection+0xcc>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	31 f0       	breq	.+12     	; 0x5b8 <DIO_u8SetPinDirection+0xd6>
     5ac:	8b c0       	rjmp	.+278    	; 0x6c4 <DIO_u8SetPinDirection+0x1e2>
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	19 f1       	breq	.+70     	; 0x5f8 <DIO_u8SetPinDirection+0x116>
     5b2:	84 30       	cpi	r24, 0x04	; 4
     5b4:	89 f1       	breq	.+98     	; 0x618 <DIO_u8SetPinDirection+0x136>
     5b6:	86 c0       	rjmp	.+268    	; 0x6c4 <DIO_u8SetPinDirection+0x1e2>
     5b8:	2a b3       	in	r18, 0x1a	; 26
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_u8SetPinDirection+0xe2>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	6a 95       	dec	r22
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_u8SetPinDirection+0xde>
     5c8:	92 2f       	mov	r25, r18
     5ca:	98 2b       	or	r25, r24
     5cc:	9a bb       	out	0x1a, r25	; 26
     5ce:	9b b3       	in	r25, 0x1b	; 27
     5d0:	89 2b       	or	r24, r25
     5d2:	8b bb       	out	0x1b, r24	; 27
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	08 95       	ret
     5d8:	27 b3       	in	r18, 0x17	; 23
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_u8SetPinDirection+0x102>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	6a 95       	dec	r22
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_u8SetPinDirection+0xfe>
     5e8:	92 2f       	mov	r25, r18
     5ea:	98 2b       	or	r25, r24
     5ec:	97 bb       	out	0x17, r25	; 23
     5ee:	98 b3       	in	r25, 0x18	; 24
     5f0:	89 2b       	or	r24, r25
     5f2:	88 bb       	out	0x18, r24	; 24
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
     5f8:	24 b3       	in	r18, 0x14	; 20
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_u8SetPinDirection+0x122>
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	6a 95       	dec	r22
     606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_u8SetPinDirection+0x11e>
     608:	92 2f       	mov	r25, r18
     60a:	98 2b       	or	r25, r24
     60c:	94 bb       	out	0x14, r25	; 20
     60e:	95 b3       	in	r25, 0x15	; 21
     610:	89 2b       	or	r24, r25
     612:	85 bb       	out	0x15, r24	; 21
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret
     618:	21 b3       	in	r18, 0x11	; 17
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_u8SetPinDirection+0x142>
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	6a 95       	dec	r22
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_u8SetPinDirection+0x13e>
     628:	92 2f       	mov	r25, r18
     62a:	98 2b       	or	r25, r24
     62c:	91 bb       	out	0x11, r25	; 17
     62e:	92 b3       	in	r25, 0x12	; 18
     630:	89 2b       	or	r24, r25
     632:	82 bb       	out	0x12, r24	; 18
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret
     638:	42 30       	cpi	r20, 0x02	; 2
     63a:	09 f0       	breq	.+2      	; 0x63e <DIO_u8SetPinDirection+0x15c>
     63c:	45 c0       	rjmp	.+138    	; 0x6c8 <DIO_u8SetPinDirection+0x1e6>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	a9 f0       	breq	.+42     	; 0x66c <DIO_u8SetPinDirection+0x18a>
     642:	18 f4       	brcc	.+6      	; 0x64a <DIO_u8SetPinDirection+0x168>
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	31 f0       	breq	.+12     	; 0x654 <DIO_u8SetPinDirection+0x172>
     648:	41 c0       	rjmp	.+130    	; 0x6cc <DIO_u8SetPinDirection+0x1ea>
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	d9 f0       	breq	.+54     	; 0x684 <DIO_u8SetPinDirection+0x1a2>
     64e:	84 30       	cpi	r24, 0x04	; 4
     650:	29 f1       	breq	.+74     	; 0x69c <DIO_u8SetPinDirection+0x1ba>
     652:	3c c0       	rjmp	.+120    	; 0x6cc <DIO_u8SetPinDirection+0x1ea>
     654:	2a b3       	in	r18, 0x1a	; 26
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_u8SetPinDirection+0x17e>
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	6a 95       	dec	r22
     662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_u8SetPinDirection+0x17a>
     664:	82 2b       	or	r24, r18
     666:	8a bb       	out	0x1a, r24	; 26
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret
     66c:	27 b3       	in	r18, 0x17	; 23
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_u8SetPinDirection+0x196>
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	6a 95       	dec	r22
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_u8SetPinDirection+0x192>
     67c:	82 2b       	or	r24, r18
     67e:	87 bb       	out	0x17, r24	; 23
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
     684:	24 b3       	in	r18, 0x14	; 20
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8SetPinDirection+0x1ae>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	6a 95       	dec	r22
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8SetPinDirection+0x1aa>
     694:	82 2b       	or	r24, r18
     696:	84 bb       	out	0x14, r24	; 20
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret
     69c:	21 b3       	in	r18, 0x11	; 17
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_u8SetPinDirection+0x1c6>
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	6a 95       	dec	r22
     6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_u8SetPinDirection+0x1c2>
     6ac:	82 2b       	or	r24, r18
     6ae:	81 bb       	out	0x11, r24	; 17
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	08 95       	ret
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	08 95       	ret
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	08 95       	ret
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 95       	ret
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 95       	ret

000006d0 <DIO_u8SetPinValue>:
     6d0:	85 30       	cpi	r24, 0x05	; 5
     6d2:	08 f0       	brcs	.+2      	; 0x6d6 <DIO_u8SetPinValue+0x6>
     6d4:	84 c0       	rjmp	.+264    	; 0x7de <DIO_u8SetPinValue+0x10e>
     6d6:	68 30       	cpi	r22, 0x08	; 8
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <DIO_u8SetPinValue+0xc>
     6da:	83 c0       	rjmp	.+262    	; 0x7e2 <DIO_u8SetPinValue+0x112>
     6dc:	42 30       	cpi	r20, 0x02	; 2
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <DIO_u8SetPinValue+0x12>
     6e0:	82 c0       	rjmp	.+260    	; 0x7e6 <DIO_u8SetPinValue+0x116>
     6e2:	41 30       	cpi	r20, 0x01	; 1
     6e4:	d9 f5       	brne	.+118    	; 0x75c <DIO_u8SetPinValue+0x8c>
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	a9 f0       	breq	.+42     	; 0x714 <DIO_u8SetPinValue+0x44>
     6ea:	18 f4       	brcc	.+6      	; 0x6f2 <DIO_u8SetPinValue+0x22>
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	31 f0       	breq	.+12     	; 0x6fc <DIO_u8SetPinValue+0x2c>
     6f0:	7c c0       	rjmp	.+248    	; 0x7ea <DIO_u8SetPinValue+0x11a>
     6f2:	83 30       	cpi	r24, 0x03	; 3
     6f4:	d9 f0       	breq	.+54     	; 0x72c <DIO_u8SetPinValue+0x5c>
     6f6:	84 30       	cpi	r24, 0x04	; 4
     6f8:	29 f1       	breq	.+74     	; 0x744 <DIO_u8SetPinValue+0x74>
     6fa:	77 c0       	rjmp	.+238    	; 0x7ea <DIO_u8SetPinValue+0x11a>
     6fc:	2b b3       	in	r18, 0x1b	; 27
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_u8SetPinValue+0x38>
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	6a 95       	dec	r22
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_u8SetPinValue+0x34>
     70c:	82 2b       	or	r24, r18
     70e:	8b bb       	out	0x1b, r24	; 27
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	08 95       	ret
     714:	28 b3       	in	r18, 0x18	; 24
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_u8SetPinValue+0x50>
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	6a 95       	dec	r22
     722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_u8SetPinValue+0x4c>
     724:	82 2b       	or	r24, r18
     726:	88 bb       	out	0x18, r24	; 24
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	08 95       	ret
     72c:	25 b3       	in	r18, 0x15	; 21
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_u8SetPinValue+0x68>
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	6a 95       	dec	r22
     73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_u8SetPinValue+0x64>
     73c:	82 2b       	or	r24, r18
     73e:	85 bb       	out	0x15, r24	; 21
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret
     744:	22 b3       	in	r18, 0x12	; 18
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_u8SetPinValue+0x80>
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	6a 95       	dec	r22
     752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_u8SetPinValue+0x7c>
     754:	82 2b       	or	r24, r18
     756:	82 bb       	out	0x12, r24	; 18
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	08 95       	ret
     75c:	41 11       	cpse	r20, r1
     75e:	47 c0       	rjmp	.+142    	; 0x7ee <DIO_u8SetPinValue+0x11e>
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	b1 f0       	breq	.+44     	; 0x790 <DIO_u8SetPinValue+0xc0>
     764:	18 f4       	brcc	.+6      	; 0x76c <DIO_u8SetPinValue+0x9c>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	31 f0       	breq	.+12     	; 0x776 <DIO_u8SetPinValue+0xa6>
     76a:	43 c0       	rjmp	.+134    	; 0x7f2 <DIO_u8SetPinValue+0x122>
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	e9 f0       	breq	.+58     	; 0x7aa <DIO_u8SetPinValue+0xda>
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	41 f1       	breq	.+80     	; 0x7c4 <DIO_u8SetPinValue+0xf4>
     774:	3e c0       	rjmp	.+124    	; 0x7f2 <DIO_u8SetPinValue+0x122>
     776:	2b b3       	in	r18, 0x1b	; 27
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_u8SetPinValue+0xb2>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	6a 95       	dec	r22
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_u8SetPinValue+0xae>
     786:	80 95       	com	r24
     788:	82 23       	and	r24, r18
     78a:	8b bb       	out	0x1b, r24	; 27
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret
     790:	28 b3       	in	r18, 0x18	; 24
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_u8SetPinValue+0xcc>
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	6a 95       	dec	r22
     79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_u8SetPinValue+0xc8>
     7a0:	80 95       	com	r24
     7a2:	82 23       	and	r24, r18
     7a4:	88 bb       	out	0x18, r24	; 24
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	08 95       	ret
     7aa:	25 b3       	in	r18, 0x15	; 21
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_u8SetPinValue+0xe6>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_u8SetPinValue+0xe2>
     7ba:	80 95       	com	r24
     7bc:	82 23       	and	r24, r18
     7be:	85 bb       	out	0x15, r24	; 21
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	08 95       	ret
     7c4:	22 b3       	in	r18, 0x12	; 18
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_u8SetPinValue+0x100>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_u8SetPinValue+0xfc>
     7d4:	80 95       	com	r24
     7d6:	82 23       	and	r24, r18
     7d8:	82 bb       	out	0x12, r24	; 18
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	08 95       	ret
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	08 95       	ret
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	08 95       	ret
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	08 95       	ret
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	08 95       	ret
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	08 95       	ret
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	08 95       	ret

000007f6 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8PinValue)
{
    /*Local Variable holding the error state*/
    u8 Local_u8Error;

    if ((Copy_u8Port > PORT_D) || (Copy_u8Pin > PIN_7) || (Copy_Pu8PinValue == NULL))
     7f6:	85 30       	cpi	r24, 0x05	; 5
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <DIO_u8GetPinValue+0x6>
     7fa:	42 c0       	rjmp	.+132    	; 0x880 <__stack+0x21>
     7fc:	68 30       	cpi	r22, 0x08	; 8
     7fe:	08 f0       	brcs	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	41 c0       	rjmp	.+130    	; 0x884 <__stack+0x25>
     802:	41 15       	cp	r20, r1
     804:	51 05       	cpc	r21, r1
     806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	3f c0       	rjmp	.+126    	; 0x888 <__stack+0x29>
        Local_u8Error = STATUS_ERROR;
    }

    else
    {
        switch (Copy_u8Port)
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	a9 f0       	breq	.+42     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     80e:	18 f4       	brcc	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	31 f0       	breq	.+12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     814:	3b c0       	rjmp	.+118    	; 0x88c <__stack+0x2d>
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	d9 f0       	breq	.+54     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     81a:	84 30       	cpi	r24, 0x04	; 4
     81c:	29 f1       	breq	.+74     	; 0x868 <__stack+0x9>
     81e:	36 c0       	rjmp	.+108    	; 0x88c <__stack+0x2d>
        {
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
     820:	89 b3       	in	r24, 0x19	; 25
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	95 95       	asr	r25
     828:	87 95       	ror	r24
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	fa 01       	movw	r30, r20
     832:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     834:	80 e0       	ldi	r24, 0x00	; 0
    {
        switch (Copy_u8Port)
        {
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
            break;
     836:	08 95       	ret
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
     838:	86 b3       	in	r24, 0x16	; 22
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	95 95       	asr	r25
     840:	87 95       	ror	r24
     842:	6a 95       	dec	r22
     844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	81 70       	andi	r24, 0x01	; 1
     848:	fa 01       	movw	r30, r20
     84a:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     84c:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_A):
            *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
            break;
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
            break;
     84e:	08 95       	ret
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
     850:	83 b3       	in	r24, 0x13	; 19
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     856:	95 95       	asr	r25
     858:	87 95       	ror	r24
     85a:	6a 95       	dec	r22
     85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     85e:	81 70       	andi	r24, 0x01	; 1
     860:	fa 01       	movw	r30, r20
     862:	80 83       	st	Z, r24
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     864:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_B):
            *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
            break;
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
            break;
     866:	08 95       	ret
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
     868:	80 b3       	in	r24, 0x10	; 16
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	95 95       	asr	r25
     870:	87 95       	ror	r24
     872:	6a 95       	dec	r22
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	81 70       	andi	r24, 0x01	; 1
     878:	fa 01       	movw	r30, r20
     87a:	80 83       	st	Z, r24
            break;
        }
        Local_u8Error = STATUS_OK;
     87c:	80 e0       	ldi	r24, 0x00	; 0
        case (PORT_C):
            *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
     87e:	08 95       	ret
    /*Local Variable holding the error state*/
    u8 Local_u8Error;

    if ((Copy_u8Port > PORT_D) || (Copy_u8Pin > PIN_7) || (Copy_Pu8PinValue == NULL))
    {
        Local_u8Error = STATUS_ERROR;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	08 95       	ret
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	08 95       	ret
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret
            break;
        case (PORT_D):
            *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
            break;
        }
        Local_u8Error = STATUS_OK;
     88c:	80 e0       	ldi	r24, 0x00	; 0
    }

    /* Function return */
    return Local_u8Error;
}
     88e:	08 95       	ret

00000890 <EXTI_VidInit>:
        }
    }

    /* Return the error state */
    return Local_u8ErrorState;
}
     890:	8b b7       	in	r24, 0x3b	; 59
     892:	80 64       	ori	r24, 0x40	; 64
     894:	8b bf       	out	0x3b, r24	; 59
     896:	8b b7       	in	r24, 0x3b	; 59
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	8b bf       	out	0x3b, r24	; 59
     89c:	8b b7       	in	r24, 0x3b	; 59
     89e:	8f 7d       	andi	r24, 0xDF	; 223
     8a0:	8b bf       	out	0x3b, r24	; 59
     8a2:	85 b7       	in	r24, 0x35	; 53
     8a4:	82 60       	ori	r24, 0x02	; 2
     8a6:	85 bf       	out	0x35, r24	; 53
     8a8:	85 b7       	in	r24, 0x35	; 53
     8aa:	81 60       	ori	r24, 0x01	; 1
     8ac:	85 bf       	out	0x35, r24	; 53
     8ae:	85 b7       	in	r24, 0x35	; 53
     8b0:	87 7f       	andi	r24, 0xF7	; 247
     8b2:	85 bf       	out	0x35, r24	; 53
     8b4:	85 b7       	in	r24, 0x35	; 53
     8b6:	8b 7f       	andi	r24, 0xFB	; 251
     8b8:	85 bf       	out	0x35, r24	; 53
     8ba:	84 b7       	in	r24, 0x34	; 52
     8bc:	8f 7b       	andi	r24, 0xBF	; 191
     8be:	84 bf       	out	0x34, r24	; 52
     8c0:	08 95       	ret

000008c2 <EXTI_u8SetCallBack>:
u8 EXTI_u8SetCallBack(u8 Copy_u8IntNumber, void (*Copy_PVCallBack)(void))
{
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = STATUS_OK;

    if (Copy_u8IntNumber >= EXTI_NO_OF_EXTI)
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	50 f4       	brcc	.+20     	; 0x8da <EXTI_u8SetCallBack+0x18>
        Local_u8ErrorState = STATUS_ERROR;
    }

    else
    {
        PVCallBack[Copy_u8IntNumber] = Copy_PVCallBack;
     8c6:	e8 2f       	mov	r30, r24
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e1 58       	subi	r30, 0x81	; 129
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	71 83       	std	Z+1, r23	; 0x01
     8d4:	60 83       	st	Z, r22
 * Output: the Error state of the function
 */
u8 EXTI_u8SetCallBack(u8 Copy_u8IntNumber, void (*Copy_PVCallBack)(void))
{
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = STATUS_OK;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	08 95       	ret

    if (Copy_u8IntNumber >= EXTI_NO_OF_EXTI)
    {
        Local_u8ErrorState = STATUS_ERROR;
     8da:	81 e0       	ldi	r24, 0x01	; 1
        PVCallBack[Copy_u8IntNumber] = Copy_PVCallBack;
    }

    /* Return the error state */
    return Local_u8ErrorState;
}
     8dc:	08 95       	ret

000008de <__vector_1>:

/* The ISR of the external interrupt INT0 */
void __vector_1(void)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	2f 93       	push	r18
     8ea:	3f 93       	push	r19
     8ec:	4f 93       	push	r20
     8ee:	5f 93       	push	r21
     8f0:	6f 93       	push	r22
     8f2:	7f 93       	push	r23
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT0] != NULL)
     900:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <PVCallBack>
     904:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <PVCallBack+0x1>
     908:	30 97       	sbiw	r30, 0x00	; 0
     90a:	09 f0       	breq	.+2      	; 0x90e <__vector_1+0x30>
        PVCallBack[EXTI_INT0]();
     90c:	09 95       	icall
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_2>:

/* The ISR of the external interrupt INT1 */
void __vector_2(void)
{
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT1] != NULL)
     952:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <PVCallBack+0x2>
     956:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <PVCallBack+0x3>
     95a:	30 97       	sbiw	r30, 0x00	; 0
     95c:	09 f0       	breq	.+2      	; 0x960 <__vector_2+0x30>
        PVCallBack[EXTI_INT1]();
     95e:	09 95       	icall
}
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <__vector_3>:

/* The ISR of the external interrupt INT2 */
void __vector_3(void)
{
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
    if (PVCallBack[EXTI_INT2] != NULL)
     9a4:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <PVCallBack+0x4>
     9a8:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <PVCallBack+0x5>
     9ac:	30 97       	sbiw	r30, 0x00	; 0
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__vector_3+0x30>
        PVCallBack[EXTI_INT2]();
     9b0:	09 95       	icall
}
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <GIE_VidEnable>:
 * Inputs: void
 * Output: void
 */
void GIE_VidEnable(void)
{
    SET_BIT(SREG, SREG_I_BIT);
     9d4:	8f b7       	in	r24, 0x3f	; 63
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	8f bf       	out	0x3f, r24	; 63
     9da:	08 95       	ret

000009dc <TMR_VidSetTIMER0OVFTime>:
    {
        *Copy_Pu16OffTime = (TMR_u16TotalTime - TMR_u16ONTime) * TMR_TIMER1_TICKTIME;
    }
    /* Function return Error state */
    return Local_u8Error;
}
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e8       	ldi	r20, 0x80	; 128
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     9fc:	81 11       	cpse	r24, r1
     9fe:	16 c0       	rjmp	.+44     	; 0xa2c <TMR_VidSetTIMER0OVFTime+0x50>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <TMR_u32ReqTimer0Cntr>
     a0c:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
     a10:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
     a14:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
     a18:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <TMR_u32Timer0Preload>
     a1c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <TMR_u32Timer0Preload+0x1>
     a20:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <TMR_u32Timer0Preload+0x2>
     a24:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <TMR_u32Timer0Preload+0x3>
     a28:	12 be       	out	0x32, r1	; 50
     a2a:	8e c0       	rjmp	.+284    	; 0xb48 <TMR_VidSetTIMER0OVFTime+0x16c>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__gesf2>
     a3c:	18 16       	cp	r1, r24
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <TMR_VidSetTIMER0OVFTime+0x66>
     a40:	52 c0       	rjmp	.+164    	; 0xae6 <TMR_VidSetTIMER0OVFTime+0x10a>
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     a4a:	4b 01       	movw	r8, r22
     a4c:	5c 01       	movw	r10, r24
     a4e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     a5e:	6b 01       	movw	r12, r22
     a60:	7c 01       	movw	r14, r24
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	a9 01       	movw	r20, r18
     a68:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     a6c:	81 11       	cpse	r24, r1
     a6e:	12 c0       	rjmp	.+36     	; 0xa94 <TMR_VidSetTIMER0OVFTime+0xb8>
     a70:	80 92 9e 00 	sts	0x009E, r8	; 0x80009e <TMR_u32ReqTimer0Cntr>
     a74:	90 92 9f 00 	sts	0x009F, r9	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
     a78:	a0 92 a0 00 	sts	0x00A0, r10	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
     a7c:	b0 92 a1 00 	sts	0x00A1, r11	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
     a80:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <TMR_u32Timer0Preload>
     a84:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <TMR_u32Timer0Preload+0x1>
     a88:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <TMR_u32Timer0Preload+0x2>
     a8c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <TMR_u32Timer0Preload+0x3>
     a90:	12 be       	out	0x32, r1	; 50
     a92:	5a c0       	rjmp	.+180    	; 0xb48 <TMR_VidSetTIMER0OVFTime+0x16c>
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e8       	ldi	r20, 0x80	; 128
     a9a:	53 e4       	ldi	r21, 0x43	; 67
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	80 e8       	ldi	r24, 0x80	; 128
     aae:	93 e4       	ldi	r25, 0x43	; 67
     ab0:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     ab4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	82 1a       	sub	r8, r18
     abc:	92 0a       	sbc	r9, r18
     abe:	a2 0a       	sbc	r10, r18
     ac0:	b2 0a       	sbc	r11, r18
     ac2:	80 92 9e 00 	sts	0x009E, r8	; 0x80009e <TMR_u32ReqTimer0Cntr>
     ac6:	90 92 9f 00 	sts	0x009F, r9	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
     aca:	a0 92 a0 00 	sts	0x00A0, r10	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
     ace:	b0 92 a1 00 	sts	0x00A1, r11	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
     ad2:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <TMR_u32Timer0Preload>
     ad6:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <TMR_u32Timer0Preload+0x1>
     ada:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <TMR_u32Timer0Preload+0x2>
     ade:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <TMR_u32Timer0Preload+0x3>
     ae2:	62 bf       	out	0x32, r22	; 50
     ae4:	31 c0       	rjmp	.+98     	; 0xb48 <TMR_VidSetTIMER0OVFTime+0x16c>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f e3       	ldi	r21, 0x3F	; 63
     aee:	c7 01       	movw	r24, r14
     af0:	b6 01       	movw	r22, r12
     af2:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     af6:	88 23       	and	r24, r24
     af8:	3c f5       	brge	.+78     	; 0xb48 <TMR_VidSetTIMER0OVFTime+0x16c>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	53 e4       	ldi	r21, 0x43	; 67
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e8       	ldi	r24, 0x80	; 128
     b14:	93 e4       	ldi	r25, 0x43	; 67
     b16:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     b1a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     b1e:	c1 2c       	mov	r12, r1
     b20:	d1 2c       	mov	r13, r1
     b22:	76 01       	movw	r14, r12
     b24:	c3 94       	inc	r12
     b26:	c0 92 9e 00 	sts	0x009E, r12	; 0x80009e <TMR_u32ReqTimer0Cntr>
     b2a:	d0 92 9f 00 	sts	0x009F, r13	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
     b2e:	e0 92 a0 00 	sts	0x00A0, r14	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
     b32:	f0 92 a1 00 	sts	0x00A1, r15	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
     b36:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <TMR_u32Timer0Preload>
     b3a:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <TMR_u32Timer0Preload+0x1>
     b3e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <TMR_u32Timer0Preload+0x2>
     b42:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <TMR_u32Timer0Preload+0x3>
     b46:	62 bf       	out	0x32, r22	; 50
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	08 95       	ret

00000b5a <TMR_VidSetTIMER1OVFTime>:
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	5f e3       	ldi	r21, 0x3F	; 63
     b76:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     b7a:	81 11       	cpse	r24, r1
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <TMR_VidSetTIMER1OVFTime+0x52>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <TMR_u32ReqTimer1Cntr>
     b8a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
     b8e:	a0 93 9c 00 	sts	0x009C, r26	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
     b92:	b0 93 9d 00 	sts	0x009D, r27	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
     b96:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <TMR_u32Timer1Preload>
     b9a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
     b9e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <TMR_u32Timer1Preload+0x2>
     ba2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <TMR_u32Timer1Preload+0x3>
     ba6:	1d bc       	out	0x2d, r1	; 45
     ba8:	1c bc       	out	0x2c, r1	; 44
     baa:	99 c0       	rjmp	.+306    	; 0xcde <TMR_VidSetTIMER1OVFTime+0x184>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e8       	ldi	r20, 0x80	; 128
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	c7 01       	movw	r24, r14
     bb6:	b6 01       	movw	r22, r12
     bb8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__gesf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	0c f0       	brlt	.+2      	; 0xbc2 <TMR_VidSetTIMER1OVFTime+0x68>
     bc0:	58 c0       	rjmp	.+176    	; 0xc72 <TMR_VidSetTIMER1OVFTime+0x118>
     bc2:	c7 01       	movw	r24, r14
     bc4:	b6 01       	movw	r22, r12
     bc6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     bca:	4b 01       	movw	r8, r22
     bcc:	5c 01       	movw	r10, r24
     bce:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     bde:	6b 01       	movw	r12, r22
     be0:	7c 01       	movw	r14, r24
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	a9 01       	movw	r20, r18
     be8:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     bec:	81 11       	cpse	r24, r1
     bee:	13 c0       	rjmp	.+38     	; 0xc16 <TMR_VidSetTIMER1OVFTime+0xbc>
     bf0:	80 92 9a 00 	sts	0x009A, r8	; 0x80009a <TMR_u32ReqTimer1Cntr>
     bf4:	90 92 9b 00 	sts	0x009B, r9	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
     bf8:	a0 92 9c 00 	sts	0x009C, r10	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
     bfc:	b0 92 9d 00 	sts	0x009D, r11	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
     c00:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <TMR_u32Timer1Preload>
     c04:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
     c08:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <TMR_u32Timer1Preload+0x2>
     c0c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <TMR_u32Timer1Preload+0x3>
     c10:	1d bc       	out	0x2d, r1	; 45
     c12:	1c bc       	out	0x2c, r1	; 44
     c14:	64 c0       	rjmp	.+200    	; 0xcde <TMR_VidSetTIMER1OVFTime+0x184>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e8       	ldi	r20, 0x80	; 128
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	97 e4       	ldi	r25, 0x47	; 71
     c32:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     c36:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	82 1a       	sub	r8, r18
     c3e:	92 0a       	sbc	r9, r18
     c40:	a2 0a       	sbc	r10, r18
     c42:	b2 0a       	sbc	r11, r18
     c44:	80 92 9a 00 	sts	0x009A, r8	; 0x80009a <TMR_u32ReqTimer1Cntr>
     c48:	90 92 9b 00 	sts	0x009B, r9	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
     c4c:	a0 92 9c 00 	sts	0x009C, r10	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
     c50:	b0 92 9d 00 	sts	0x009D, r11	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
     c54:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <TMR_u32Timer1Preload>
     c58:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
     c5c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <TMR_u32Timer1Preload+0x2>
     c60:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <TMR_u32Timer1Preload+0x3>
     c64:	c7 2e       	mov	r12, r23
     c66:	d8 2e       	mov	r13, r24
     c68:	e9 2e       	mov	r14, r25
     c6a:	ff 24       	eor	r15, r15
     c6c:	cd bc       	out	0x2d, r12	; 45
     c6e:	6c bd       	out	0x2c, r22	; 44
     c70:	36 c0       	rjmp	.+108    	; 0xcde <TMR_VidSetTIMER1OVFTime+0x184>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     c82:	88 23       	and	r24, r24
     c84:	64 f5       	brge	.+88     	; 0xcde <TMR_VidSetTIMER1OVFTime+0x184>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	57 e4       	ldi	r21, 0x47	; 71
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	97 e4       	ldi	r25, 0x47	; 71
     ca2:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     ca6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     caa:	c1 2c       	mov	r12, r1
     cac:	d1 2c       	mov	r13, r1
     cae:	76 01       	movw	r14, r12
     cb0:	c3 94       	inc	r12
     cb2:	c0 92 9a 00 	sts	0x009A, r12	; 0x80009a <TMR_u32ReqTimer1Cntr>
     cb6:	d0 92 9b 00 	sts	0x009B, r13	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
     cba:	e0 92 9c 00 	sts	0x009C, r14	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
     cbe:	f0 92 9d 00 	sts	0x009D, r15	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
     cc2:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <TMR_u32Timer1Preload>
     cc6:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
     cca:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <TMR_u32Timer1Preload+0x2>
     cce:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <TMR_u32Timer1Preload+0x3>
     cd2:	c7 2e       	mov	r12, r23
     cd4:	d8 2e       	mov	r13, r24
     cd6:	e9 2e       	mov	r14, r25
     cd8:	ff 24       	eor	r15, r15
     cda:	cd bc       	out	0x2d, r12	; 45
     cdc:	6c bd       	out	0x2c, r22	; 44
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	08 95       	ret

00000cf0 <TMR_VidSetTIMER2OVFTime>:
     cf0:	8f 92       	push	r8
     cf2:	9f 92       	push	r9
     cf4:	af 92       	push	r10
     cf6:	bf 92       	push	r11
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	6b 01       	movw	r12, r22
     d02:	7c 01       	movw	r14, r24
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     d10:	81 11       	cpse	r24, r1
     d12:	16 c0       	rjmp	.+44     	; 0xd40 <TMR_VidSetTIMER2OVFTime+0x50>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <TMR_u32ReqTimer2Cntr>
     d20:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
     d24:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
     d28:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
     d2c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TMR_u32Timer2Preload>
     d30:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <TMR_u32Timer2Preload+0x1>
     d34:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <TMR_u32Timer2Preload+0x2>
     d38:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <TMR_u32Timer2Preload+0x3>
     d3c:	14 bc       	out	0x24, r1	; 36
     d3e:	8e c0       	rjmp	.+284    	; 0xe5c <TMR_VidSetTIMER2OVFTime+0x16c>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__gesf2>
     d50:	18 16       	cp	r1, r24
     d52:	0c f0       	brlt	.+2      	; 0xd56 <TMR_VidSetTIMER2OVFTime+0x66>
     d54:	52 c0       	rjmp	.+164    	; 0xdfa <TMR_VidSetTIMER2OVFTime+0x10a>
     d56:	c7 01       	movw	r24, r14
     d58:	b6 01       	movw	r22, r12
     d5a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     d5e:	4b 01       	movw	r8, r22
     d60:	5c 01       	movw	r10, r24
     d62:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     d72:	6b 01       	movw	r12, r22
     d74:	7c 01       	movw	r14, r24
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	a9 01       	movw	r20, r18
     d7c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     d80:	81 11       	cpse	r24, r1
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <TMR_VidSetTIMER2OVFTime+0xb8>
     d84:	80 92 96 00 	sts	0x0096, r8	; 0x800096 <TMR_u32ReqTimer2Cntr>
     d88:	90 92 97 00 	sts	0x0097, r9	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
     d8c:	a0 92 98 00 	sts	0x0098, r10	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
     d90:	b0 92 99 00 	sts	0x0099, r11	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
     d94:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TMR_u32Timer2Preload>
     d98:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <TMR_u32Timer2Preload+0x1>
     d9c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <TMR_u32Timer2Preload+0x2>
     da0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <TMR_u32Timer2Preload+0x3>
     da4:	14 bc       	out	0x24, r1	; 36
     da6:	5a c0       	rjmp	.+180    	; 0xe5c <TMR_VidSetTIMER2OVFTime+0x16c>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	53 e4       	ldi	r21, 0x43	; 67
     db0:	c7 01       	movw	r24, r14
     db2:	b6 01       	movw	r22, r12
     db4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	93 e4       	ldi	r25, 0x43	; 67
     dc4:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     dc8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     dcc:	2f ef       	ldi	r18, 0xFF	; 255
     dce:	82 1a       	sub	r8, r18
     dd0:	92 0a       	sbc	r9, r18
     dd2:	a2 0a       	sbc	r10, r18
     dd4:	b2 0a       	sbc	r11, r18
     dd6:	80 92 96 00 	sts	0x0096, r8	; 0x800096 <TMR_u32ReqTimer2Cntr>
     dda:	90 92 97 00 	sts	0x0097, r9	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
     dde:	a0 92 98 00 	sts	0x0098, r10	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
     de2:	b0 92 99 00 	sts	0x0099, r11	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
     de6:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <TMR_u32Timer2Preload>
     dea:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <TMR_u32Timer2Preload+0x1>
     dee:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <TMR_u32Timer2Preload+0x2>
     df2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <TMR_u32Timer2Preload+0x3>
     df6:	64 bd       	out	0x24, r22	; 36
     df8:	31 c0       	rjmp	.+98     	; 0xe5c <TMR_VidSetTIMER2OVFTime+0x16c>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	3c f5       	brge	.+78     	; 0xe5c <TMR_VidSetTIMER2OVFTime+0x16c>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	93 e4       	ldi	r25, 0x43	; 67
     e2a:	0e 94 80 0a 	call	0x1500	; 0x1500 <__subsf3>
     e2e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fixunssfsi>
     e32:	c1 2c       	mov	r12, r1
     e34:	d1 2c       	mov	r13, r1
     e36:	76 01       	movw	r14, r12
     e38:	c3 94       	inc	r12
     e3a:	c0 92 96 00 	sts	0x0096, r12	; 0x800096 <TMR_u32ReqTimer2Cntr>
     e3e:	d0 92 97 00 	sts	0x0097, r13	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
     e42:	e0 92 98 00 	sts	0x0098, r14	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
     e46:	f0 92 99 00 	sts	0x0099, r15	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
     e4a:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <TMR_u32Timer2Preload>
     e4e:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <TMR_u32Timer2Preload+0x1>
     e52:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <TMR_u32Timer2Preload+0x2>
     e56:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <TMR_u32Timer2Preload+0x3>
     e5a:	64 bd       	out	0x24, r22	; 36
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	08 95       	ret

00000e6e <TMR_VidInit>:
     e6e:	83 b7       	in	r24, 0x33	; 51
     e70:	8f 7b       	andi	r24, 0xBF	; 191
     e72:	83 bf       	out	0x33, r24	; 51
     e74:	83 b7       	in	r24, 0x33	; 51
     e76:	87 7f       	andi	r24, 0xF7	; 247
     e78:	83 bf       	out	0x33, r24	; 51
     e7a:	89 b7       	in	r24, 0x39	; 57
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	89 bf       	out	0x39, r24	; 57
     e80:	83 b7       	in	r24, 0x33	; 51
     e82:	8f 7e       	andi	r24, 0xEF	; 239
     e84:	83 bf       	out	0x33, r24	; 51
     e86:	83 b7       	in	r24, 0x33	; 51
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	83 bf       	out	0x33, r24	; 51
     e8c:	83 b7       	in	r24, 0x33	; 51
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	83 bf       	out	0x33, r24	; 51
     e92:	83 b7       	in	r24, 0x33	; 51
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	83 bf       	out	0x33, r24	; 51
     e98:	83 b7       	in	r24, 0x33	; 51
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	83 bf       	out	0x33, r24	; 51
     e9e:	83 b7       	in	r24, 0x33	; 51
     ea0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <TMR_u8Timer0CtrlRegValue>
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8e bd       	out	0x2e, r24	; 46
     eaa:	8e b5       	in	r24, 0x2e	; 46
     eac:	8d 7f       	andi	r24, 0xFD	; 253
     eae:	8e bd       	out	0x2e, r24	; 46
     eb0:	8e b5       	in	r24, 0x2e	; 46
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	8e bd       	out	0x2e, r24	; 46
     eb6:	85 b5       	in	r24, 0x25	; 37
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	85 bd       	out	0x25, r24	; 37
     ebc:	85 b5       	in	r24, 0x25	; 37
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	85 bd       	out	0x25, r24	; 37
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	85 bd       	out	0x25, r24	; 37
     ec8:	08 95       	ret

00000eca <TMR_u8SetDesiredTime>:
     eca:	28 2f       	mov	r18, r24
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	08 f0       	brcs	.+2      	; 0xed2 <TMR_u8SetDesiredTime+0x8>
     ed0:	44 c0       	rjmp	.+136    	; 0xf5a <TMR_u8SetDesiredTime+0x90>
     ed2:	cb 01       	movw	r24, r22
     ed4:	ba 01       	movw	r22, r20
     ed6:	21 30       	cpi	r18, 0x01	; 1
     ed8:	c1 f0       	breq	.+48     	; 0xf0a <TMR_u8SetDesiredTime+0x40>
     eda:	18 f0       	brcs	.+6      	; 0xee2 <TMR_u8SetDesiredTime+0x18>
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	49 f1       	breq	.+82     	; 0xf32 <TMR_u8SetDesiredTime+0x68>
     ee0:	3e c0       	rjmp	.+124    	; 0xf5e <TMR_u8SetDesiredTime+0x94>
     ee2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr>
     ee6:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
     eea:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
     eee:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
     ef2:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	59 e3       	ldi	r21, 0x39	; 57
     efe:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     f02:	0e 94 ee 04 	call	0x9dc	; 0x9dc <TMR_VidSetTIMER0OVFTime>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
     f0a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr>
     f0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
     f12:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
     f16:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
     f1a:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	54 e3       	ldi	r21, 0x34	; 52
     f26:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     f2a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TMR_VidSetTIMER1OVFTime>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 95       	ret
     f32:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr>
     f36:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x1>
     f3a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
     f3e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
     f42:	0e 94 21 0b 	call	0x1642	; 0x1642 <__floatunsisf>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5b e3       	ldi	r21, 0x3B	; 59
     f4e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsf3>
     f52:	0e 94 78 06 	call	0xcf0	; 0xcf0 <TMR_VidSetTIMER2OVFTime>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	08 95       	ret
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret

00000f62 <TMR_u8SetCallBack>:
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	b0 f4       	brcc	.+44     	; 0xf92 <TMR_u8SetCallBack+0x30>
     f66:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <TMR_u32Timer0Preload>
     f6a:	92 bf       	out	0x32, r25	; 50
     f6c:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <TMR_u32Timer1Preload>
     f70:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
     f74:	3d bd       	out	0x2d, r19	; 45
     f76:	2c bd       	out	0x2c, r18	; 44
     f78:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <TMR_u32Timer2Preload>
     f7c:	94 bd       	out	0x24, r25	; 36
     f7e:	e8 2f       	mov	r30, r24
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e6 57       	subi	r30, 0x76	; 118
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	71 83       	std	Z+1, r23	; 0x01
     f8c:	60 83       	st	Z, r22
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	08 95       	ret
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 95       	ret

00000f96 <__vector_6>:

/* ISR of Input Capture interrupts */
void __vector_6(void)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
    static u8 Local_u8Flag = 0;
    static u16 Local_u16StartTime = 0;
    static u16 Local_u16StopTime = 0;

    if (Local_u8Flag == 0)
     fb4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <Local_u8Flag.1764>
     fb8:	81 11       	cpse	r24, r1
     fba:	2f c0       	rjmp	.+94     	; 0x101a <__vector_6+0x84>
    {
        Local_u8Flag = 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Local_u8Flag.1764>
        TMR_u16TotalTime = ICR1 - Local_u16StartTime;
     fc2:	66 b5       	in	r22, 0x26	; 38
     fc4:	77 b5       	in	r23, 0x27	; 39
     fc6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <Local_u16StartTime.1765>
     fca:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <Local_u16StartTime.1765+0x1>
     fce:	68 1b       	sub	r22, r24
     fd0:	79 0b       	sbc	r23, r25
     fd2:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <TMR_u16TotalTime+0x1>
     fd6:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <TMR_u16TotalTime>
        TMR_u16ONTime = Local_u16StopTime - Local_u16StartTime;
     fda:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <Local_u16StopTime.1766>
     fde:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <Local_u16StopTime.1766+0x1>
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <TMR_u16ONTime+0x1>
     fea:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <TMR_u16ONTime>
        Local_u16StartTime = ICR1;
     fee:	86 b5       	in	r24, 0x26	; 38
     ff0:	97 b5       	in	r25, 0x27	; 39
     ff2:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <Local_u16StartTime.1765+0x1>
     ff6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Local_u16StartTime.1765>
        TMR_u16DutyCycle = ((TMR_u16ONTime * 100) / TMR_u16TotalTime);
     ffa:	44 e6       	ldi	r20, 0x64	; 100
     ffc:	42 9f       	mul	r20, r18
     ffe:	c0 01       	movw	r24, r0
    1000:	43 9f       	mul	r20, r19
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	0e 94 45 0c 	call	0x188a	; 0x188a <__udivmodhi4>
    100a:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <TMR_u16DutyCycle+0x1>
    100e:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <TMR_u16DutyCycle>
        CLR_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Falling Edge */
    1012:	8e b5       	in	r24, 0x2e	; 46
    1014:	8f 7b       	andi	r24, 0xBF	; 191
    1016:	8e bd       	out	0x2e, r24	; 46
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <__vector_6+0x9a>
    }
    else
    {
        Local_u8Flag = 0;
    101a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <Local_u8Flag.1764>
        Local_u16StopTime = ICR1;
    101e:	86 b5       	in	r24, 0x26	; 38
    1020:	97 b5       	in	r25, 0x27	; 39
    1022:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <Local_u16StopTime.1766+0x1>
    1026:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Local_u16StopTime.1766>
        SET_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Raising Edge */
    102a:	8e b5       	in	r24, 0x2e	; 46
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	8e bd       	out	0x2e, r24	; 46
    }
}
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_11>:

/*========================== ISRs of Overflow timer interrupts ==========================*/

/* The ISR of Timer/Counter0 Overflow interrupt */
void __vector_11(void)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER0] != NULL)
    1070:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <PVCallBack>
    1074:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <PVCallBack+0x1>
    1078:	89 2b       	or	r24, r25
    107a:	81 f1       	breq	.+96     	; 0x10dc <__vector_11+0x8e>
    {
        TMR_u32Timer0Cntr++;
    107c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <TMR_u32Timer0Cntr>
    1080:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    1084:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    1088:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	a1 1d       	adc	r26, r1
    1090:	b1 1d       	adc	r27, r1
    1092:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <TMR_u32Timer0Cntr>
    1096:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    109a:	a0 93 b8 00 	sts	0x00B8, r26	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    109e:	b0 93 b9 00 	sts	0x00B9, r27	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
        if (TMR_u32Timer0Cntr == TMR_u32ReqTimer0Cntr)
    10a2:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <TMR_u32ReqTimer0Cntr>
    10a6:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
    10aa:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
    10ae:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
    10b2:	84 17       	cp	r24, r20
    10b4:	95 07       	cpc	r25, r21
    10b6:	a6 07       	cpc	r26, r22
    10b8:	b7 07       	cpc	r27, r23
    10ba:	81 f4       	brne	.+32     	; 0x10dc <__vector_11+0x8e>
        {
            TMR_u32Timer0Cntr = 0;
    10bc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr>
    10c0:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    10c4:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    10c8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
            TCNT0 = TMR_u32Timer0Preload;
    10cc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <TMR_u32Timer0Preload>
    10d0:	82 bf       	out	0x32, r24	; 50
            PVCallBack[TMR_TIMER0](); /* The ISR action */
    10d2:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <PVCallBack>
    10d6:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <PVCallBack+0x1>
    10da:	09 95       	icall
        }
    }
}
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector_9>:

/* The ISR of Timer/Counter1 Overflow interrupt */
void __vector_9(void)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    1120:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <PVCallBack+0x2>
    1124:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <PVCallBack+0x3>
    1128:	89 2b       	or	r24, r25
    112a:	e9 f1       	breq	.+122    	; 0x11a6 <__vector_9+0xa8>
    {
        TMR_u32Timer1Cntr++;
    112c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr>
    1130:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1134:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    1138:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	a1 1d       	adc	r26, r1
    1140:	b1 1d       	adc	r27, r1
    1142:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <TMR_u32Timer1Cntr>
    1146:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    114a:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    114e:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    1152:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr>
    1156:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
    115a:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
    115e:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
    1162:	84 17       	cp	r24, r20
    1164:	95 07       	cpc	r25, r21
    1166:	a6 07       	cpc	r26, r22
    1168:	b7 07       	cpc	r27, r23
    116a:	e9 f4       	brne	.+58     	; 0x11a6 <__vector_9+0xa8>
        {
            TMR_u32Timer1Cntr = 0;
    116c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr>
    1170:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1174:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    1178:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
            TCNT1H = TMR_u32Timer1Preload >> 8;
    117c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TMR_u32Timer1Preload>
    1180:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <TMR_u32Timer1Preload+0x1>
    1184:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <TMR_u32Timer1Preload+0x2>
    1188:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <TMR_u32Timer1Preload+0x3>
    118c:	89 2f       	mov	r24, r25
    118e:	9a 2f       	mov	r25, r26
    1190:	ab 2f       	mov	r26, r27
    1192:	bb 27       	eor	r27, r27
    1194:	8d bd       	out	0x2d, r24	; 45
            TCNT1L = TMR_u32Timer1Preload;
    1196:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TMR_u32Timer1Preload>
    119a:	8c bd       	out	0x2c, r24	; 44
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    119c:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <PVCallBack+0x2>
    11a0:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <PVCallBack+0x3>
    11a4:	09 95       	icall
        }
    }
}
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_5>:

/* The ISR of Timer/Counter2 Overflow interrupt */
void __vector_5(void)
{
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	2f 93       	push	r18
    11d4:	3f 93       	push	r19
    11d6:	4f 93       	push	r20
    11d8:	5f 93       	push	r21
    11da:	6f 93       	push	r22
    11dc:	7f 93       	push	r23
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER2] != NULL)
    11ea:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <PVCallBack+0x4>
    11ee:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <PVCallBack+0x5>
    11f2:	89 2b       	or	r24, r25
    11f4:	81 f1       	breq	.+96     	; 0x1256 <__vector_5+0x8e>
    {
        TMR_u32Timer2Cntr++;
    11f6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <TMR_u32Timer2Cntr>
    11fa:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    11fe:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    1202:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	a1 1d       	adc	r26, r1
    120a:	b1 1d       	adc	r27, r1
    120c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <TMR_u32Timer2Cntr>
    1210:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    1214:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    1218:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
        if (TMR_u32Timer2Cntr == TMR_u32ReqTimer2Cntr)
    121c:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <TMR_u32ReqTimer2Cntr>
    1220:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
    1224:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
    1228:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
    122c:	84 17       	cp	r24, r20
    122e:	95 07       	cpc	r25, r21
    1230:	a6 07       	cpc	r26, r22
    1232:	b7 07       	cpc	r27, r23
    1234:	81 f4       	brne	.+32     	; 0x1256 <__vector_5+0x8e>
        {
            TMR_u32Timer2Cntr = 0;
    1236:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr>
    123a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    123e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    1242:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
            TCNT2 = TMR_u32Timer2Preload;
    1246:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <TMR_u32Timer2Preload>
    124a:	84 bd       	out	0x24, r24	; 36
            PVCallBack[TMR_TIMER2](); /* The ISR action */
    124c:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <PVCallBack+0x4>
    1250:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <PVCallBack+0x5>
    1254:	09 95       	icall
        }
    }
}
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_10>:

/*========================== ISRs of Compare Match timer interrupts ==========================*/

/* The ISR of Timer/Counter0 Compare Match interrupt */
void __vector_10(void)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER0] != NULL)
    129a:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <PVCallBack>
    129e:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <PVCallBack+0x1>
    12a2:	30 97       	sbiw	r30, 0x00	; 0
    12a4:	49 f1       	breq	.+82     	; 0x12f8 <__vector_10+0x80>
    {
        TMR_u32Timer0Cntr++;
    12a6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <TMR_u32Timer0Cntr>
    12aa:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    12ae:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    12b2:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	a1 1d       	adc	r26, r1
    12ba:	b1 1d       	adc	r27, r1
    12bc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <TMR_u32Timer0Cntr>
    12c0:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    12c4:	a0 93 b8 00 	sts	0x00B8, r26	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    12c8:	b0 93 b9 00 	sts	0x00B9, r27	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
        if (TMR_u32Timer0Cntr == TMR_u32ReqTimer0Cntr)
    12cc:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <TMR_u32ReqTimer0Cntr>
    12d0:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <TMR_u32ReqTimer0Cntr+0x1>
    12d4:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <TMR_u32ReqTimer0Cntr+0x2>
    12d8:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <TMR_u32ReqTimer0Cntr+0x3>
    12dc:	84 17       	cp	r24, r20
    12de:	95 07       	cpc	r25, r21
    12e0:	a6 07       	cpc	r26, r22
    12e2:	b7 07       	cpc	r27, r23
    12e4:	49 f4       	brne	.+18     	; 0x12f8 <__vector_10+0x80>
        {
            TMR_u32Timer0Cntr = 0;
    12e6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <TMR_u32Timer0Cntr>
    12ea:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <TMR_u32Timer0Cntr+0x1>
    12ee:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TMR_u32Timer0Cntr+0x2>
    12f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <TMR_u32Timer0Cntr+0x3>
            PVCallBack[TMR_TIMER0](); /* The ISR action */
    12f6:	09 95       	icall
        }
    }
}
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_7>:

/* The ISR of Timer/Counter1 Compare Match A interrupt */
void __vector_7(void)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    133c:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <PVCallBack+0x2>
    1340:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <PVCallBack+0x3>
    1344:	30 97       	sbiw	r30, 0x00	; 0
    1346:	49 f1       	breq	.+82     	; 0x139a <__vector_7+0x80>
    {
        TMR_u32Timer1Cntr++;
    1348:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr>
    134c:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1350:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    1354:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	a1 1d       	adc	r26, r1
    135c:	b1 1d       	adc	r27, r1
    135e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <TMR_u32Timer1Cntr>
    1362:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1366:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    136a:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    136e:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr>
    1372:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
    1376:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
    137a:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
    137e:	84 17       	cp	r24, r20
    1380:	95 07       	cpc	r25, r21
    1382:	a6 07       	cpc	r26, r22
    1384:	b7 07       	cpc	r27, r23
    1386:	49 f4       	brne	.+18     	; 0x139a <__vector_7+0x80>
        {
            TMR_u32Timer1Cntr = 0;
    1388:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr>
    138c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1390:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    1394:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    1398:	09 95       	icall
        }
    }
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_8>:

/* The ISR of Timer/Counter1 Compare Match B interrupt */
void __vector_8(void)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER1] != NULL)
    13de:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <PVCallBack+0x2>
    13e2:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <PVCallBack+0x3>
    13e6:	30 97       	sbiw	r30, 0x00	; 0
    13e8:	49 f1       	breq	.+82     	; 0x143c <__vector_8+0x80>
    {
        TMR_u32Timer1Cntr++;
    13ea:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <TMR_u32Timer1Cntr>
    13ee:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    13f2:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    13f6:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	a1 1d       	adc	r26, r1
    13fe:	b1 1d       	adc	r27, r1
    1400:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <TMR_u32Timer1Cntr>
    1404:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1408:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    140c:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
        if (TMR_u32Timer1Cntr == TMR_u32ReqTimer1Cntr)
    1410:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <TMR_u32ReqTimer1Cntr>
    1414:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <TMR_u32ReqTimer1Cntr+0x1>
    1418:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <TMR_u32ReqTimer1Cntr+0x2>
    141c:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <TMR_u32ReqTimer1Cntr+0x3>
    1420:	84 17       	cp	r24, r20
    1422:	95 07       	cpc	r25, r21
    1424:	a6 07       	cpc	r26, r22
    1426:	b7 07       	cpc	r27, r23
    1428:	49 f4       	brne	.+18     	; 0x143c <__vector_8+0x80>
        {
            TMR_u32Timer1Cntr = 0;
    142a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <TMR_u32Timer1Cntr>
    142e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TMR_u32Timer1Cntr+0x1>
    1432:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <TMR_u32Timer1Cntr+0x2>
    1436:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <TMR_u32Timer1Cntr+0x3>
            PVCallBack[TMR_TIMER1](); /* The ISR action */
    143a:	09 95       	icall
        }
    }
}
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_4>:

/* The ISR of Timer/Counter2 Compare Match interrupt */
void __vector_4(void)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
    if (PVCallBack[TMR_TIMER2] != NULL)
    1480:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <PVCallBack+0x4>
    1484:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <PVCallBack+0x5>
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	49 f1       	breq	.+82     	; 0x14de <__vector_4+0x80>
    {
        TMR_u32Timer2Cntr++;
    148c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <TMR_u32Timer2Cntr>
    1490:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    1494:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    1498:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	a1 1d       	adc	r26, r1
    14a0:	b1 1d       	adc	r27, r1
    14a2:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <TMR_u32Timer2Cntr>
    14a6:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    14aa:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    14ae:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
        if (TMR_u32Timer2Cntr == TMR_u32ReqTimer2Cntr)
    14b2:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <TMR_u32ReqTimer2Cntr>
    14b6:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <TMR_u32ReqTimer2Cntr+0x1>
    14ba:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <TMR_u32ReqTimer2Cntr+0x2>
    14be:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <TMR_u32ReqTimer2Cntr+0x3>
    14c2:	84 17       	cp	r24, r20
    14c4:	95 07       	cpc	r25, r21
    14c6:	a6 07       	cpc	r26, r22
    14c8:	b7 07       	cpc	r27, r23
    14ca:	49 f4       	brne	.+18     	; 0x14de <__vector_4+0x80>
        {
            TMR_u32Timer2Cntr = 0;
    14cc:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <TMR_u32Timer2Cntr>
    14d0:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <TMR_u32Timer2Cntr+0x1>
    14d4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <TMR_u32Timer2Cntr+0x2>
    14d8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TMR_u32Timer2Cntr+0x3>
            PVCallBack[TMR_TIMER2](); /* The ISR action */
    14dc:	09 95       	icall
        }
    }
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__subsf3>:
    1500:	50 58       	subi	r21, 0x80	; 128

00001502 <__addsf3>:
    1502:	bb 27       	eor	r27, r27
    1504:	aa 27       	eor	r26, r26
    1506:	0e 94 98 0a 	call	0x1530	; 0x1530 <__addsf3x>
    150a:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_round>
    150e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fp_pscA>
    1512:	38 f0       	brcs	.+14     	; 0x1522 <__addsf3+0x20>
    1514:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fp_pscB>
    1518:	20 f0       	brcs	.+8      	; 0x1522 <__addsf3+0x20>
    151a:	39 f4       	brne	.+14     	; 0x152a <__addsf3+0x28>
    151c:	9f 3f       	cpi	r25, 0xFF	; 255
    151e:	19 f4       	brne	.+6      	; 0x1526 <__addsf3+0x24>
    1520:	26 f4       	brtc	.+8      	; 0x152a <__addsf3+0x28>
    1522:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__fp_nan>
    1526:	0e f4       	brtc	.+2      	; 0x152a <__addsf3+0x28>
    1528:	e0 95       	com	r30
    152a:	e7 fb       	bst	r30, 7
    152c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__fp_inf>

00001530 <__addsf3x>:
    1530:	e9 2f       	mov	r30, r25
    1532:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fp_split3>
    1536:	58 f3       	brcs	.-42     	; 0x150e <__addsf3+0xc>
    1538:	ba 17       	cp	r27, r26
    153a:	62 07       	cpc	r22, r18
    153c:	73 07       	cpc	r23, r19
    153e:	84 07       	cpc	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	20 f0       	brcs	.+8      	; 0x154c <__addsf3x+0x1c>
    1544:	79 f4       	brne	.+30     	; 0x1564 <__addsf3x+0x34>
    1546:	a6 f5       	brtc	.+104    	; 0x15b0 <__addsf3x+0x80>
    1548:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_zero>
    154c:	0e f4       	brtc	.+2      	; 0x1550 <__addsf3x+0x20>
    154e:	e0 95       	com	r30
    1550:	0b 2e       	mov	r0, r27
    1552:	ba 2f       	mov	r27, r26
    1554:	a0 2d       	mov	r26, r0
    1556:	0b 01       	movw	r0, r22
    1558:	b9 01       	movw	r22, r18
    155a:	90 01       	movw	r18, r0
    155c:	0c 01       	movw	r0, r24
    155e:	ca 01       	movw	r24, r20
    1560:	a0 01       	movw	r20, r0
    1562:	11 24       	eor	r1, r1
    1564:	ff 27       	eor	r31, r31
    1566:	59 1b       	sub	r21, r25
    1568:	99 f0       	breq	.+38     	; 0x1590 <__addsf3x+0x60>
    156a:	59 3f       	cpi	r21, 0xF9	; 249
    156c:	50 f4       	brcc	.+20     	; 0x1582 <__addsf3x+0x52>
    156e:	50 3e       	cpi	r21, 0xE0	; 224
    1570:	68 f1       	brcs	.+90     	; 0x15cc <__addsf3x+0x9c>
    1572:	1a 16       	cp	r1, r26
    1574:	f0 40       	sbci	r31, 0x00	; 0
    1576:	a2 2f       	mov	r26, r18
    1578:	23 2f       	mov	r18, r19
    157a:	34 2f       	mov	r19, r20
    157c:	44 27       	eor	r20, r20
    157e:	58 5f       	subi	r21, 0xF8	; 248
    1580:	f3 cf       	rjmp	.-26     	; 0x1568 <__addsf3x+0x38>
    1582:	46 95       	lsr	r20
    1584:	37 95       	ror	r19
    1586:	27 95       	ror	r18
    1588:	a7 95       	ror	r26
    158a:	f0 40       	sbci	r31, 0x00	; 0
    158c:	53 95       	inc	r21
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__addsf3x+0x52>
    1590:	7e f4       	brtc	.+30     	; 0x15b0 <__addsf3x+0x80>
    1592:	1f 16       	cp	r1, r31
    1594:	ba 0b       	sbc	r27, r26
    1596:	62 0b       	sbc	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	84 0b       	sbc	r24, r20
    159c:	ba f0       	brmi	.+46     	; 0x15cc <__addsf3x+0x9c>
    159e:	91 50       	subi	r25, 0x01	; 1
    15a0:	a1 f0       	breq	.+40     	; 0x15ca <__addsf3x+0x9a>
    15a2:	ff 0f       	add	r31, r31
    15a4:	bb 1f       	adc	r27, r27
    15a6:	66 1f       	adc	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	c2 f7       	brpl	.-16     	; 0x159e <__addsf3x+0x6e>
    15ae:	0e c0       	rjmp	.+28     	; 0x15cc <__addsf3x+0x9c>
    15b0:	ba 0f       	add	r27, r26
    15b2:	62 1f       	adc	r22, r18
    15b4:	73 1f       	adc	r23, r19
    15b6:	84 1f       	adc	r24, r20
    15b8:	48 f4       	brcc	.+18     	; 0x15cc <__addsf3x+0x9c>
    15ba:	87 95       	ror	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b7 95       	ror	r27
    15c2:	f7 95       	ror	r31
    15c4:	9e 3f       	cpi	r25, 0xFE	; 254
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <__addsf3x+0x9a>
    15c8:	b0 cf       	rjmp	.-160    	; 0x152a <__addsf3+0x28>
    15ca:	93 95       	inc	r25
    15cc:	88 0f       	add	r24, r24
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <__addsf3x+0xa2>
    15d0:	99 27       	eor	r25, r25
    15d2:	ee 0f       	add	r30, r30
    15d4:	97 95       	ror	r25
    15d6:	87 95       	ror	r24
    15d8:	08 95       	ret

000015da <__cmpsf2>:
    15da:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fp_cmp>
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <__cmpsf2+0x8>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	08 95       	ret

000015e4 <__fixunssfsi>:
    15e4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_splitA>
    15e8:	88 f0       	brcs	.+34     	; 0x160c <__fixunssfsi+0x28>
    15ea:	9f 57       	subi	r25, 0x7F	; 127
    15ec:	98 f0       	brcs	.+38     	; 0x1614 <__fixunssfsi+0x30>
    15ee:	b9 2f       	mov	r27, r25
    15f0:	99 27       	eor	r25, r25
    15f2:	b7 51       	subi	r27, 0x17	; 23
    15f4:	b0 f0       	brcs	.+44     	; 0x1622 <__fixunssfsi+0x3e>
    15f6:	e1 f0       	breq	.+56     	; 0x1630 <__fixunssfsi+0x4c>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	1a f0       	brmi	.+6      	; 0x1608 <__fixunssfsi+0x24>
    1602:	ba 95       	dec	r27
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__fixunssfsi+0x14>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <__fixunssfsi+0x4c>
    1608:	b1 30       	cpi	r27, 0x01	; 1
    160a:	91 f0       	breq	.+36     	; 0x1630 <__fixunssfsi+0x4c>
    160c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_zero>
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	08 95       	ret
    1614:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_zero>
    1618:	67 2f       	mov	r22, r23
    161a:	78 2f       	mov	r23, r24
    161c:	88 27       	eor	r24, r24
    161e:	b8 5f       	subi	r27, 0xF8	; 248
    1620:	39 f0       	breq	.+14     	; 0x1630 <__fixunssfsi+0x4c>
    1622:	b9 3f       	cpi	r27, 0xF9	; 249
    1624:	cc f3       	brlt	.-14     	; 0x1618 <__fixunssfsi+0x34>
    1626:	86 95       	lsr	r24
    1628:	77 95       	ror	r23
    162a:	67 95       	ror	r22
    162c:	b3 95       	inc	r27
    162e:	d9 f7       	brne	.-10     	; 0x1626 <__fixunssfsi+0x42>
    1630:	3e f4       	brtc	.+14     	; 0x1640 <__fixunssfsi+0x5c>
    1632:	90 95       	com	r25
    1634:	80 95       	com	r24
    1636:	70 95       	com	r23
    1638:	61 95       	neg	r22
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	08 95       	ret

00001642 <__floatunsisf>:
    1642:	e8 94       	clt
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <__floatsisf+0x12>

00001646 <__floatsisf>:
    1646:	97 fb       	bst	r25, 7
    1648:	3e f4       	brtc	.+14     	; 0x1658 <__floatsisf+0x12>
    164a:	90 95       	com	r25
    164c:	80 95       	com	r24
    164e:	70 95       	com	r23
    1650:	61 95       	neg	r22
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	99 23       	and	r25, r25
    165a:	a9 f0       	breq	.+42     	; 0x1686 <__floatsisf+0x40>
    165c:	f9 2f       	mov	r31, r25
    165e:	96 e9       	ldi	r25, 0x96	; 150
    1660:	bb 27       	eor	r27, r27
    1662:	93 95       	inc	r25
    1664:	f6 95       	lsr	r31
    1666:	87 95       	ror	r24
    1668:	77 95       	ror	r23
    166a:	67 95       	ror	r22
    166c:	b7 95       	ror	r27
    166e:	f1 11       	cpse	r31, r1
    1670:	f8 cf       	rjmp	.-16     	; 0x1662 <__floatsisf+0x1c>
    1672:	fa f4       	brpl	.+62     	; 0x16b2 <__floatsisf+0x6c>
    1674:	bb 0f       	add	r27, r27
    1676:	11 f4       	brne	.+4      	; 0x167c <__floatsisf+0x36>
    1678:	60 ff       	sbrs	r22, 0
    167a:	1b c0       	rjmp	.+54     	; 0x16b2 <__floatsisf+0x6c>
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	16 c0       	rjmp	.+44     	; 0x16b2 <__floatsisf+0x6c>
    1686:	88 23       	and	r24, r24
    1688:	11 f0       	breq	.+4      	; 0x168e <__floatsisf+0x48>
    168a:	96 e9       	ldi	r25, 0x96	; 150
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <__floatsisf+0x6a>
    168e:	77 23       	and	r23, r23
    1690:	21 f0       	breq	.+8      	; 0x169a <__floatsisf+0x54>
    1692:	9e e8       	ldi	r25, 0x8E	; 142
    1694:	87 2f       	mov	r24, r23
    1696:	76 2f       	mov	r23, r22
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__floatsisf+0x5e>
    169a:	66 23       	and	r22, r22
    169c:	71 f0       	breq	.+28     	; 0x16ba <__floatsisf+0x74>
    169e:	96 e8       	ldi	r25, 0x86	; 134
    16a0:	86 2f       	mov	r24, r22
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	2a f0       	brmi	.+10     	; 0x16b2 <__floatsisf+0x6c>
    16a8:	9a 95       	dec	r25
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	da f7       	brpl	.-10     	; 0x16a8 <__floatsisf+0x62>
    16b2:	88 0f       	add	r24, r24
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	97 f9       	bld	r25, 7
    16ba:	08 95       	ret

000016bc <__fp_cmp>:
    16bc:	99 0f       	add	r25, r25
    16be:	00 08       	sbc	r0, r0
    16c0:	55 0f       	add	r21, r21
    16c2:	aa 0b       	sbc	r26, r26
    16c4:	e0 e8       	ldi	r30, 0x80	; 128
    16c6:	fe ef       	ldi	r31, 0xFE	; 254
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	e8 07       	cpc	r30, r24
    16ce:	f9 07       	cpc	r31, r25
    16d0:	c0 f0       	brcs	.+48     	; 0x1702 <__fp_cmp+0x46>
    16d2:	12 16       	cp	r1, r18
    16d4:	13 06       	cpc	r1, r19
    16d6:	e4 07       	cpc	r30, r20
    16d8:	f5 07       	cpc	r31, r21
    16da:	98 f0       	brcs	.+38     	; 0x1702 <__fp_cmp+0x46>
    16dc:	62 1b       	sub	r22, r18
    16de:	73 0b       	sbc	r23, r19
    16e0:	84 0b       	sbc	r24, r20
    16e2:	95 0b       	sbc	r25, r21
    16e4:	39 f4       	brne	.+14     	; 0x16f4 <__fp_cmp+0x38>
    16e6:	0a 26       	eor	r0, r26
    16e8:	61 f0       	breq	.+24     	; 0x1702 <__fp_cmp+0x46>
    16ea:	23 2b       	or	r18, r19
    16ec:	24 2b       	or	r18, r20
    16ee:	25 2b       	or	r18, r21
    16f0:	21 f4       	brne	.+8      	; 0x16fa <__fp_cmp+0x3e>
    16f2:	08 95       	ret
    16f4:	0a 26       	eor	r0, r26
    16f6:	09 f4       	brne	.+2      	; 0x16fa <__fp_cmp+0x3e>
    16f8:	a1 40       	sbci	r26, 0x01	; 1
    16fa:	a6 95       	lsr	r26
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	81 1d       	adc	r24, r1
    1700:	81 1d       	adc	r24, r1
    1702:	08 95       	ret

00001704 <__fp_inf>:
    1704:	97 f9       	bld	r25, 7
    1706:	9f 67       	ori	r25, 0x7F	; 127
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	08 95       	ret

00001710 <__fp_nan>:
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	80 ec       	ldi	r24, 0xC0	; 192
    1714:	08 95       	ret

00001716 <__fp_pscA>:
    1716:	00 24       	eor	r0, r0
    1718:	0a 94       	dec	r0
    171a:	16 16       	cp	r1, r22
    171c:	17 06       	cpc	r1, r23
    171e:	18 06       	cpc	r1, r24
    1720:	09 06       	cpc	r0, r25
    1722:	08 95       	ret

00001724 <__fp_pscB>:
    1724:	00 24       	eor	r0, r0
    1726:	0a 94       	dec	r0
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	14 06       	cpc	r1, r20
    172e:	05 06       	cpc	r0, r21
    1730:	08 95       	ret

00001732 <__fp_round>:
    1732:	09 2e       	mov	r0, r25
    1734:	03 94       	inc	r0
    1736:	00 0c       	add	r0, r0
    1738:	11 f4       	brne	.+4      	; 0x173e <__fp_round+0xc>
    173a:	88 23       	and	r24, r24
    173c:	52 f0       	brmi	.+20     	; 0x1752 <__fp_round+0x20>
    173e:	bb 0f       	add	r27, r27
    1740:	40 f4       	brcc	.+16     	; 0x1752 <__fp_round+0x20>
    1742:	bf 2b       	or	r27, r31
    1744:	11 f4       	brne	.+4      	; 0x174a <__fp_round+0x18>
    1746:	60 ff       	sbrs	r22, 0
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__fp_round+0x20>
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__fp_split3>:
    1754:	57 fd       	sbrc	r21, 7
    1756:	90 58       	subi	r25, 0x80	; 128
    1758:	44 0f       	add	r20, r20
    175a:	55 1f       	adc	r21, r21
    175c:	59 f0       	breq	.+22     	; 0x1774 <__fp_splitA+0x10>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	71 f0       	breq	.+28     	; 0x177e <__fp_splitA+0x1a>
    1762:	47 95       	ror	r20

00001764 <__fp_splitA>:
    1764:	88 0f       	add	r24, r24
    1766:	97 fb       	bst	r25, 7
    1768:	99 1f       	adc	r25, r25
    176a:	61 f0       	breq	.+24     	; 0x1784 <__fp_splitA+0x20>
    176c:	9f 3f       	cpi	r25, 0xFF	; 255
    176e:	79 f0       	breq	.+30     	; 0x178e <__fp_splitA+0x2a>
    1770:	87 95       	ror	r24
    1772:	08 95       	ret
    1774:	12 16       	cp	r1, r18
    1776:	13 06       	cpc	r1, r19
    1778:	14 06       	cpc	r1, r20
    177a:	55 1f       	adc	r21, r21
    177c:	f2 cf       	rjmp	.-28     	; 0x1762 <__fp_split3+0xe>
    177e:	46 95       	lsr	r20
    1780:	f1 df       	rcall	.-30     	; 0x1764 <__fp_splitA>
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <__fp_splitA+0x30>
    1784:	16 16       	cp	r1, r22
    1786:	17 06       	cpc	r1, r23
    1788:	18 06       	cpc	r1, r24
    178a:	99 1f       	adc	r25, r25
    178c:	f1 cf       	rjmp	.-30     	; 0x1770 <__fp_splitA+0xc>
    178e:	86 95       	lsr	r24
    1790:	71 05       	cpc	r23, r1
    1792:	61 05       	cpc	r22, r1
    1794:	08 94       	sec
    1796:	08 95       	ret

00001798 <__fp_zero>:
    1798:	e8 94       	clt

0000179a <__fp_szero>:
    179a:	bb 27       	eor	r27, r27
    179c:	66 27       	eor	r22, r22
    179e:	77 27       	eor	r23, r23
    17a0:	cb 01       	movw	r24, r22
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <__gesf2>:
    17a6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__fp_cmp>
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <__gesf2+0x8>
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	08 95       	ret

000017b0 <__mulsf3>:
    17b0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__mulsf3x>
    17b4:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_round>
    17b8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fp_pscA>
    17bc:	38 f0       	brcs	.+14     	; 0x17cc <__mulsf3+0x1c>
    17be:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fp_pscB>
    17c2:	20 f0       	brcs	.+8      	; 0x17cc <__mulsf3+0x1c>
    17c4:	95 23       	and	r25, r21
    17c6:	11 f0       	breq	.+4      	; 0x17cc <__mulsf3+0x1c>
    17c8:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__fp_inf>
    17cc:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__fp_nan>
    17d0:	11 24       	eor	r1, r1
    17d2:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_szero>

000017d6 <__mulsf3x>:
    17d6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fp_split3>
    17da:	70 f3       	brcs	.-36     	; 0x17b8 <__mulsf3+0x8>

000017dc <__mulsf3_pse>:
    17dc:	95 9f       	mul	r25, r21
    17de:	c1 f3       	breq	.-16     	; 0x17d0 <__mulsf3+0x20>
    17e0:	95 0f       	add	r25, r21
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	55 1f       	adc	r21, r21
    17e6:	62 9f       	mul	r22, r18
    17e8:	f0 01       	movw	r30, r0
    17ea:	72 9f       	mul	r23, r18
    17ec:	bb 27       	eor	r27, r27
    17ee:	f0 0d       	add	r31, r0
    17f0:	b1 1d       	adc	r27, r1
    17f2:	63 9f       	mul	r22, r19
    17f4:	aa 27       	eor	r26, r26
    17f6:	f0 0d       	add	r31, r0
    17f8:	b1 1d       	adc	r27, r1
    17fa:	aa 1f       	adc	r26, r26
    17fc:	64 9f       	mul	r22, r20
    17fe:	66 27       	eor	r22, r22
    1800:	b0 0d       	add	r27, r0
    1802:	a1 1d       	adc	r26, r1
    1804:	66 1f       	adc	r22, r22
    1806:	82 9f       	mul	r24, r18
    1808:	22 27       	eor	r18, r18
    180a:	b0 0d       	add	r27, r0
    180c:	a1 1d       	adc	r26, r1
    180e:	62 1f       	adc	r22, r18
    1810:	73 9f       	mul	r23, r19
    1812:	b0 0d       	add	r27, r0
    1814:	a1 1d       	adc	r26, r1
    1816:	62 1f       	adc	r22, r18
    1818:	83 9f       	mul	r24, r19
    181a:	a0 0d       	add	r26, r0
    181c:	61 1d       	adc	r22, r1
    181e:	22 1f       	adc	r18, r18
    1820:	74 9f       	mul	r23, r20
    1822:	33 27       	eor	r19, r19
    1824:	a0 0d       	add	r26, r0
    1826:	61 1d       	adc	r22, r1
    1828:	23 1f       	adc	r18, r19
    182a:	84 9f       	mul	r24, r20
    182c:	60 0d       	add	r22, r0
    182e:	21 1d       	adc	r18, r1
    1830:	82 2f       	mov	r24, r18
    1832:	76 2f       	mov	r23, r22
    1834:	6a 2f       	mov	r22, r26
    1836:	11 24       	eor	r1, r1
    1838:	9f 57       	subi	r25, 0x7F	; 127
    183a:	50 40       	sbci	r21, 0x00	; 0
    183c:	9a f0       	brmi	.+38     	; 0x1864 <__mulsf3_pse+0x88>
    183e:	f1 f0       	breq	.+60     	; 0x187c <__mulsf3_pse+0xa0>
    1840:	88 23       	and	r24, r24
    1842:	4a f0       	brmi	.+18     	; 0x1856 <__mulsf3_pse+0x7a>
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	bb 1f       	adc	r27, r27
    184a:	66 1f       	adc	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	88 1f       	adc	r24, r24
    1850:	91 50       	subi	r25, 0x01	; 1
    1852:	50 40       	sbci	r21, 0x00	; 0
    1854:	a9 f7       	brne	.-22     	; 0x1840 <__mulsf3_pse+0x64>
    1856:	9e 3f       	cpi	r25, 0xFE	; 254
    1858:	51 05       	cpc	r21, r1
    185a:	80 f0       	brcs	.+32     	; 0x187c <__mulsf3_pse+0xa0>
    185c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__fp_inf>
    1860:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_szero>
    1864:	5f 3f       	cpi	r21, 0xFF	; 255
    1866:	e4 f3       	brlt	.-8      	; 0x1860 <__mulsf3_pse+0x84>
    1868:	98 3e       	cpi	r25, 0xE8	; 232
    186a:	d4 f3       	brlt	.-12     	; 0x1860 <__mulsf3_pse+0x84>
    186c:	86 95       	lsr	r24
    186e:	77 95       	ror	r23
    1870:	67 95       	ror	r22
    1872:	b7 95       	ror	r27
    1874:	f7 95       	ror	r31
    1876:	e7 95       	ror	r30
    1878:	9f 5f       	subi	r25, 0xFF	; 255
    187a:	c1 f7       	brne	.-16     	; 0x186c <__mulsf3_pse+0x90>
    187c:	fe 2b       	or	r31, r30
    187e:	88 0f       	add	r24, r24
    1880:	91 1d       	adc	r25, r1
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	97 f9       	bld	r25, 7
    1888:	08 95       	ret

0000188a <__udivmodhi4>:
    188a:	aa 1b       	sub	r26, r26
    188c:	bb 1b       	sub	r27, r27
    188e:	51 e1       	ldi	r21, 0x11	; 17
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <__udivmodhi4_ep>

00001892 <__udivmodhi4_loop>:
    1892:	aa 1f       	adc	r26, r26
    1894:	bb 1f       	adc	r27, r27
    1896:	a6 17       	cp	r26, r22
    1898:	b7 07       	cpc	r27, r23
    189a:	10 f0       	brcs	.+4      	; 0x18a0 <__udivmodhi4_ep>
    189c:	a6 1b       	sub	r26, r22
    189e:	b7 0b       	sbc	r27, r23

000018a0 <__udivmodhi4_ep>:
    18a0:	88 1f       	adc	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	5a 95       	dec	r21
    18a6:	a9 f7       	brne	.-22     	; 0x1892 <__udivmodhi4_loop>
    18a8:	80 95       	com	r24
    18aa:	90 95       	com	r25
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	08 95       	ret

000018b2 <_exit>:
    18b2:	f8 94       	cli

000018b4 <__stop_program>:
    18b4:	ff cf       	rjmp	.-2      	; 0x18b4 <__stop_program>
